[
  {
    "objectID": "tutorials/dataflow.html",
    "href": "tutorials/dataflow.html",
    "title": "Dataflow",
    "section": "",
    "text": "Reactive execution is based on a single rule: when a cell is run, all other cells that reference any of the global variables it defines run automatically.\nTo provide reactive execution, marimo creates a dataflow graph out of your cells.  Tip: disabling automatic execution.\nmarimo lets you disable automatic execution: just go into the notebook settings and set\n‚ÄúRuntime &gt; On Cell Change‚Äù to ‚Äúlazy‚Äù.\nWhen the runtime is lazy, after running a cell, marimo marks its descendants as stale instead of automatically running them. The lazy runtime puts you in control over when cells are run, while still giving guarantees about the notebook state.  ## References and definitions\nA marimo notebook is a directed acyclic graph in which nodes represent cells and edges represent data dependencies. marimo creates this graph by analyzing each cell (without running it) to determine its\n\nreferences (‚Äúrefs*), the global variables it reads but doesn‚Äôt define;\ndefinitions (‚Äúdefs‚Äù), the global variables it defines.\n\nThere is an edge from one cell to another if the latter cell references any global variables defined by the former cell.\nThe rule for reactive execution can be restated in terms of the graph: when a cell is run, its descendants are run automatically.  ### Example\nThe next four cells plot a sine wave with a given period and amplitude. Each cell is labeled with its refs and defs.\nmo.accordion(\n    {\n        \"Tip: inspecting refs and defs\": f\"\"\"\n        Use `mo.refs()` and `mo.defs()` to inspect the refs and defs of any\n        given cell. This can help with debugging complex notebooks.\n\n        For example, here are the refs and defs of this cell:\n\n        {mo.as_html({\"refs\": mo.refs(), \"defs\": mo.defs()})}\n        \"\"\"\n    }\n)\nmo.md(\n    f\"\"\"\n    {mo.as_html(plot_wave(amplitude, period))}\n\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\nperiod = 2 * 3.14159\n\nmo.md(\n    f\"\"\"\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\namplitude = 1\n\nmo.md(\n    f\"\"\"\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\ndef plot_wave(amplitude, period):\n    x = np.linspace(0, 2 * np.pi, 256)\n    plt.plot(x, amplitude * np.sin(2 * np.pi / period * x))\n    plt.xlim(0, 2 * np.pi)\n    plt.ylim(-2, 2)\n    plt.xticks(\n        [0, np.pi / 2, np.pi, 3 * np.pi / 2, 2 * np.pi],\n        [0, r\"$\\pi/2$\", r\"$\\pi$\", r\"$3\\pi/2$\", r\"$2\\pi$\"],\n    )\n    plt.yticks([-2, -1, 0, 1, 2])\n    plt.gcf().set_size_inches(6.5, 2.4)\n    return plt.gca()\n\nmo.md(\n    f\"\"\"\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\nüåä Try it! In the above cells, try changing the value period or ampltitude, then click the run button ( ‚ñ∑ ) to register your changes. See what happens to the sine wave.  Here is the dataflow graph for the cells that make the sine wave plot, plus the cells that import libraries. Each cell is labeled with its defs.\n                   +------+               +-----------+\n       +-----------| {mo} |-----------+   | {np, plt} |\n       |           +---+--+           |   +----+------+\n       |               |              |        |\n       |               |              |        |\n       v               v              v        v\n  +----------+   +-------------+   +--+----------+\n  | {period} |   | {amplitude} |   | {plot_wave} |\n  +---+------+   +-----+-------+   +------+------+\n      |                |                  |\n      |                v                  |\n      |              +----+               |\n      +------------&gt; | {} | &lt;-------------+\n                     +----+\nThe last cell, which doesn‚Äôt define anything, produces the plot.  ## Dataflow programming\nmarimo‚Äôs runtime rule has some important consequences that may seem surprising if you are not used to dataflow programming. We list these below.  ### Execution order is not cell order\nThe order in which cells are executed is determined entirely by the dataflow graph. This makes marimo notebooks more reproducible than traditional notebooks. It also lets you place boilerplate, like imports or long markdown strings, at the bottom of the editor.  ### Global variable names must be unique\nEvery global variable can be defined by only one cell. Without this constraint, there would be no way for marimo to know which order to execute cells in.\nIf you violate this constraint, marimo provides a helpful error message, like below:\nplanet = \"Mars\"\nplanet\nplanet = \"Earth\"\nplanet\nüåä Try it! In the previous cell, change the name planet to home, then run the cell.  Because defs must be unique, global variables cannot be modified with operators like += or -= in cells other than the one that created them; these operators count as redefinitions of a name.\nüåä Try it! Get rid of the following errors by merging the next two cells into a single cell.\ncount = 0\ncount += 1\n\n\nGlobal variables prefixed with an underscore are ‚Äúprivate‚Äù to the cells that define them. This means that multiple cells can define the same underscore-prefixed name, and one cell‚Äôs private variables won‚Äôt be made available to other cells.\nExample.\n_private_variable, _ = 1, 2\n_private_variable, _\n_private_variable, _ = 3, 4\n_private_variable, _\n# `_private_variable` and `_` are not defined in this cell\n_private_variable, _\n\n\n\nDeleting a cell deletes its global variables and then runs all cells that reference them. This prevents severe bugs that can arise when state has been deleted from the editor but not from the program memory.\nto_be_deleted = \"variable still exists\"\n\nmo.md(\n    \"\"\"\n    üåä **Try it!**\n\n    Delete this cell by clicking the trash bin icon.\n    \"\"\"\n)\nto_be_deleted\n\n\n\nCycles among cells are not allowed. For example:\none = two - 1\ntwo = one + 1\n\n\n\nmarimo only tracks global variables. Writing object attributes does not trigger reactive execution.\nüåä Example. Change the value of state.number in the next cell, then run the cell. Notice how the subsequent cell isn‚Äôt updated.\nstate.number = 1\nstate.number\nclass namespace:\n    pass\n\nstate = namespace()\nstate.number = 0\nmo.accordion(\n    {\n        \"Why not track attributes?\": \"\"\"\n        marimo can't reliably trace attributes \n        to cells that define them. For example, attributes are routinely \n        created or modified by library code.\n        \"\"\"\n    }\n)\n\n\n\nIn Python, it‚Äôs impossible to know whether code will mutate an object without running it. So: mutations (such as appending to a list) will not trigger reactive execution.\nmo.accordion(\n    {\n        \"Tip (advanced): mutable state\": (\n            \"\"\"\n        You can use the fact that marimo does not track attributes or \n        mutations to implement mutable state in marimo. An example of\n        this is shown in the `ui` tutorial.\n        \"\"\"\n        )\n    }\n)\n\n\n\nThe constraints marimo puts on your notebooks are all natural consequences of the fact that marimo programs are directed acyclic graphs. As long as you keep this fact in mind, you‚Äôll quickly adapt to the marimo way of writing notebooks.\nUltimately, these constraints will enable you to create powerful notebooks and apps, and they‚Äôll encourage you to write clean, reproducible code.\nFollow these tips to stay on the marimo way:\nmo.accordion(tips)\n\n\n\nCheck out the tutorial on interactivity for a tour of UI elements:\nmarimo tutorial ui\nimport matplotlib.pyplot as plt\nimport numpy as np\ntips = {\n    \"Use global variables sparingly\": (\n        \"\"\"\n        Keep the number of global variables in your program small to avoid\n        name collisions across cells. Keep the number of global variables \n        defined by any one cell small to make sure that the units of\n        reactive execution are small. \n        \"\"\"\n    ),\n    \"Use descriptive names\": (\n        \"\"\"\n        Use descriptive variable names, especially for global variables.\n        This will help you minimize name clashes, and will also result in\n        better code.\n        \"\"\"\n    ),\n    \"Use functions\": (\n        \"\"\"\n        Encapsulate logic into functions to avoid polluting the global\n        namespace with temporary or intermediate variables.\n        \"\"\"\n    ),\n    \"Minimize mutations\": (\n        \"\"\"\n        We saw earlier that marimo cannot track object mutations. So try\n        to only mutate an object in the cell that creates it, or create\n        new objects instead of mutating existing ones.\n\n        For example, don't do this:\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        ```\n\n        ```python3\n        # another cell\n        numbers.append(4)\n        ```\n\n        Instead, prefer\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        numbers.append(4)\n        ```\n\n        or\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        ```\n\n        ```python3\n        # another cell\n        more_numbers = numbers + [4]\n        ```\n        \"\"\"\n    ),\n    \"Write idempotent cells\": (\n        \"\"\"  \n        Write cells whose outputs and behavior are the same when given\n        the same inputs (refs); such cells are called _idempotent_. This will\n        help you avoid bugs, and let you cache expensive intermediate\n        computations (see the next tip).\n        \"\"\"\n    ),\n    \"Cache intermediate computations with `@mo.cache`\": (\n        \"\"\"\n        Use `mo.cache` to cache the return value of expensive functions.\n        You can do this if you abstract complex logic into idempotent\n        functions, following earlier tips.\n\n        For example:\n\n        ```python3\n        import marimo as mo\n\n        @mo.cache\n        def compute_prediction(problem_parameters):\n          ...\n        ```\n\n        Whenever `compute_predictions` is called with a value of\n        `problem_parameters` it has not seen, it will compute the predictions\n        and store them in a cache. The next time it is called with the same\n        parameters, instead of recomputing the predictions, it will just \n        fetch the previously computed ones from the cache.\n\n        If you are familiar with `functools.cache`, `mo.cache` is\n        similar but more robust, with the cache persisting even\n        if the cell defining the function is re-run.\n        \"\"\"\n    ),\n}\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Dataflow"
    ]
  },
  {
    "objectID": "tutorials/dataflow.html#best-practices",
    "href": "tutorials/dataflow.html#best-practices",
    "title": "Dataflow",
    "section": "",
    "text": "The constraints marimo puts on your notebooks are all natural consequences of the fact that marimo programs are directed acyclic graphs. As long as you keep this fact in mind, you‚Äôll quickly adapt to the marimo way of writing notebooks.\nUltimately, these constraints will enable you to create powerful notebooks and apps, and they‚Äôll encourage you to write clean, reproducible code.\nFollow these tips to stay on the marimo way:\nmo.accordion(tips)",
    "crumbs": [
      "Tutorials",
      "Dataflow"
    ]
  },
  {
    "objectID": "tutorials/dataflow.html#whats-next",
    "href": "tutorials/dataflow.html#whats-next",
    "title": "Dataflow",
    "section": "",
    "text": "Check out the tutorial on interactivity for a tour of UI elements:\nmarimo tutorial ui\nimport matplotlib.pyplot as plt\nimport numpy as np\ntips = {\n    \"Use global variables sparingly\": (\n        \"\"\"\n        Keep the number of global variables in your program small to avoid\n        name collisions across cells. Keep the number of global variables \n        defined by any one cell small to make sure that the units of\n        reactive execution are small. \n        \"\"\"\n    ),\n    \"Use descriptive names\": (\n        \"\"\"\n        Use descriptive variable names, especially for global variables.\n        This will help you minimize name clashes, and will also result in\n        better code.\n        \"\"\"\n    ),\n    \"Use functions\": (\n        \"\"\"\n        Encapsulate logic into functions to avoid polluting the global\n        namespace with temporary or intermediate variables.\n        \"\"\"\n    ),\n    \"Minimize mutations\": (\n        \"\"\"\n        We saw earlier that marimo cannot track object mutations. So try\n        to only mutate an object in the cell that creates it, or create\n        new objects instead of mutating existing ones.\n\n        For example, don't do this:\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        ```\n\n        ```python3\n        # another cell\n        numbers.append(4)\n        ```\n\n        Instead, prefer\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        numbers.append(4)\n        ```\n\n        or\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        ```\n\n        ```python3\n        # another cell\n        more_numbers = numbers + [4]\n        ```\n        \"\"\"\n    ),\n    \"Write idempotent cells\": (\n        \"\"\"  \n        Write cells whose outputs and behavior are the same when given\n        the same inputs (refs); such cells are called _idempotent_. This will\n        help you avoid bugs, and let you cache expensive intermediate\n        computations (see the next tip).\n        \"\"\"\n    ),\n    \"Cache intermediate computations with `@mo.cache`\": (\n        \"\"\"\n        Use `mo.cache` to cache the return value of expensive functions.\n        You can do this if you abstract complex logic into idempotent\n        functions, following earlier tips.\n\n        For example:\n\n        ```python3\n        import marimo as mo\n\n        @mo.cache\n        def compute_prediction(problem_parameters):\n          ...\n        ```\n\n        Whenever `compute_predictions` is called with a value of\n        `problem_parameters` it has not seen, it will compute the predictions\n        and store them in a cache. The next time it is called with the same\n        parameters, instead of recomputing the predictions, it will just \n        fetch the previously computed ones from the cache.\n\n        If you are familiar with `functools.cache`, `mo.cache` is\n        similar but more robust, with the cache persisting even\n        if the cell defining the function is re-run.\n        \"\"\"\n    ),\n}\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Dataflow"
    ]
  },
  {
    "objectID": "tutorials/for_jupyter_users.html",
    "href": "tutorials/for_jupyter_users.html",
    "title": "marimo for Jupyter users",
    "section": "",
    "text": "marimo for Jupyter users\nThis notebook explains important differences between Jupyter and marimo. If you‚Äôre familiar with Jupyter and are trying out marimo for the first time, read on!  ## Reactive execution\nThe biggest difference between marimo and Jupyter is reactive execution.\nTry updating the value of x in the next cell, then run it.\n\n    \n    0\n    \n    x%20%3D%200%3B%20x\n\n\n    \n    1\n    \n    y%20%3D%20x%20%2B%201%3B%20y\n\nmarimo ‚Äòreacts‚Äô to the change in x and automatically recalculates y!\nExplanation. marimo reads the code in your cells and understands the dependences between them, based on the variables that each cell declares and references. When you execute one cell, marimo automatically executes all other cells that depend on it, not unlike a spreadsheet.\nIn contrast, Jupyter requires you to manually run each cell.  ### Why?\nReactive execution frees you from the tedious task of manually re-running cells.\nIt also ensures that your code and outputs remain in sync:\n\nYou don‚Äôt have to worry about whether you forgot to re-run a cell.\nWhen you delete a cell, its variables are automatically removed from program memory. Affected cells are automatically invalidated.\n\nThis makes marimo notebooks as reproducible as regular Python scripts.  ## Interactive elements built-in\nmarimo comes with a large library of UI elements that are automatically synchronized with Python.\n\n    \n    \n    \n    import%20marimo%20as%20mo\n\n\n    \n    \n    \n    slider%20%3D%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20label%3D%22%24x%24%22)%0Aslider\n\n\n    \n    1\n    \n    slider.value\n\nExplanation. marimo is both a notebook and a library. Import marimo as mo and use mo.ui to get access to powerful UI elements.\nUI elements assigned to variables are automatically plugged into marimo‚Äôs reactive execution model: interactions automatically trigger execution of cells that refer to them.\nIn contrast, Jupyter‚Äôs lack of reactivity makes IPyWidgets difficult to use.  ## Shareable as apps\nmarimo notebooks can be shared as read-only web apps: just serve it with\nmarimo run your_notebook.py\nat the command-line.\nNot every marimo notebook needs to be shared as an app, but marimo makes it seamless to do so if you want to. In this way, marimo works as a replacement for both Jupyter and Streamlit.  ## Cell order\nIn marimo, cells can be arranged in any order ‚Äî marimo figures out the one true way to execute them based on variable declarations and references (in a ‚Äútopologically sorted‚Äù order)\n\n    \n    1\n    \n    z.value\n\n\n    \n    \n    \n    z%20%3D%20mo.ui.slider(1%2C%2010%2C%20label%3D%22%24z%24%22)%3B%20z\n\nThis lets you arrange your cells in the way that makes the most sense to you. For example, put helper functions and imports at the bottom of a notebook, like an appendix.\nIn contrast, Jupyter notebooks implicitly assume a top-to-bottom execution order.  ## Re-assigning variables\nmarimo disallows variable re-assignment. Here is something commonly done in Jupyter notebooks that cannot be done in marimo:\n\n    \n    \n    \n    df%20%3D%200\n\n\n    \n    \n    \n    df%20%3D%201\n\n\n    \n    \n    \n    results%20%3D%20df.groupby(%5B%22my_column%22%5D).sum()\n\nExplanation. results depends on df, but which value of df should it use? Reactivity makes it impossible to answer this question in a sensible way, so marimo disallows variable reassignment.\nIf you run into this error, here are your options:\n\ncombine definitions into one cell\nprefix variables with an underscore (_df) to make them local to the cell\nwrap your code in functions, or give your variables more descriptive names  ## Markdown\n\nmarimo only has Python cells, but you can still write Markdown: import marimo as mo and use mo.md to write Markdown.\n\n    \n    The value of  is 1.\n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20value%20of%20%7Bslider%7D%20is%20%7Bslider.value%7D.%0A%20%20%20%20%22%22%22%0A)\n\nExplanation. By lifting Markdown into Python, marimo lets you construct dynamic Markdown parameterized by arbitrary Python elements. marimo knows how to render its own elements, and you can use mo.as_html to render other objects, like plots.\nTip: toggle a markdown view via Cmd/Ctrl-Shift-M in an empty cell.  ## Notebook files\nJupyter saves notebooks as JSON files, with outputs serialized in them. This is helpful as a record of your plots and other results, but makes notebooks difficult to version and reuse.\n\nmarimo notebooks are Python scripts\nmarimo notebooks are stored as pure Python scripts. This lets you version them with git, execute them with the command line, and re-use logic from one notebook in another.\n\n\nmarimo notebooks do not store outputs\nmarimo does not save your outputs in the file; if you want them saved, make sure to save them to disk with Python, or export to HTML via the notebook menu.\n\n\nmarimo notebooks are versionable with git\nmarimo is designed so that small changes in your code yield small git diffs!  ## Parting thoughts\nmarimo is a reinvention of the Python notebook as a reproducible, interactive, and shareable Python program, instead of an error-prone scratchpad.\nWe believe that the tools we use shape the way we think ‚Äî better tools, for better minds. With marimo, we hope to provide the Python community with a better programming environment to do research and communicate it; to experiment with code and share it; to learn computational science and teach it.\nThe marimo editor and library have many features not discussed here. Check out our docs to learn more!\nThis guide was adapted from Pluto for Jupyter users. We ‚ù§Ô∏è Pluto.jl!\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials",
      "marimo for Jupyter users"
    ]
  },
  {
    "objectID": "tutorials/intro.html",
    "href": "tutorials/intro.html",
    "title": "Intro",
    "section": "",
    "text": "import%20marimo%20as%20mo%0A%0Amo.md(%22%23%20Welcome%20to%20marimo!%20%F0%9F%8C%8A%F0%9F%8D%83%22)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#reactive-execution",
    "href": "tutorials/intro.html#reactive-execution",
    "title": "Intro",
    "section": "1. Reactive execution",
    "text": "1. Reactive execution\nA marimo notebook is made up of small blocks of Python code called cells.\nmarimo reads your cells and models the dependencies among them: whenever a cell that defines a global variable is run, marimo automatically runs all cells that reference that variable.\nReactivity keeps your program state and outputs in sync with your code, making for a dynamic programming environment that prevents bugs before they happen.\n\n            \n            üåä See it in action. In the next cell, change the value of the\nvariable  changed to True, then click the run button.\n            \n            (%0A%20%20%20%20mo.md(%0A%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20**%E2%9C%A8%20Nice!**%20The%20value%20of%20%60changed%60%20is%20now%20%7Bchanged%7D.%0A%0A%20%20%20%20%20%20%20%20When%20you%20updated%20the%20value%20of%20the%20variable%20%60changed%60%2C%20marimo%0A%20%20%20%20%20%20%20%20**reacted**%20by%20running%20this%20cell%20automatically%2C%20because%20this%20cell%0A%20%20%20%20%20%20%20%20references%20the%20global%20variable%20%60changed%60.%0A%0A%20%20%20%20%20%20%20%20Reactivity%20ensures%20that%20your%20notebook%20state%20is%20always%0A%20%20%20%20%20%20%20%20consistent%2C%20which%20is%20crucial%20for%20doing%20good%20science%3B%20it's%20also%20what%0A%20%20%20%20%20%20%20%20enables%20marimo%20notebooks%20to%20double%20as%20tools%20and%20%20apps.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A%20%20%20%20if%20changed%0A%20%20%20%20else%20mo.md(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**%F0%9F%8C%8A%20See%20it%20in%20action.**%20In%20the%20next%20cell%2C%20change%20the%20value%20of%20the%0A%20%20%20%20%20%20%20%20variable%20%20%60changed%60%20to%20%60True%60%2C%20then%20click%20the%20run%20button.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A)\n        \n\n    \n    \n    \n    changed%20%3D%20False\n\n\n            \n            The order of cells on the page has no bearing on\nthe order in which cells are executed: marimo knows that a cell\nreading a variable must run after the cell that  defines it. This\nfrees you to organize your code in the way that makes the most\nsense for you.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20execution%20order%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20order%20of%20cells%20on%20the%20page%20has%20no%20bearing%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20order%20in%20which%20cells%20are%20executed%3A%20marimo%20knows%20that%20a%20cell%0A%20%20%20%20%20%20%20%20%20%20%20%20reading%20a%20variable%20must%20run%20after%20the%20cell%20that%20%20defines%20it.%20This%0A%20%20%20%20%20%20%20%20%20%20%20%20frees%20you%20to%20organize%20your%20code%20in%20the%20way%20that%20makes%20the%20most%0A%20%20%20%20%20%20%20%20%20%20%20%20sense%20for%20you.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \nGlobal names must be unique. To enable reactivity, marimo imposes a constraint on how names appear in cells: no two cells may define the same variable.\n\n            \n            By encapsulating logic in functions, classes, or Python modules,\nyou can minimize the number of global variables in your notebook.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20encapsulation%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20By%20encapsulating%20logic%20in%20functions%2C%20classes%2C%20or%20Python%20modules%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20you%20can%20minimize%20the%20number%20of%20global%20variables%20in%20your%20notebook.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \n\n            \n            Variables prefixed with an underscore are \"private\" to a cell, so\nthey can be defined by multiple cells.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20private%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Variables%20prefixed%20with%20an%20underscore%20are%20%22private%22%20to%20a%20cell%2C%20so%0A%20%20%20%20%20%20%20%20%20%20%20%20they%20can%20be%20defined%20by%20multiple%20cells.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#ui-elements",
    "href": "tutorials/intro.html#ui-elements",
    "title": "Intro",
    "section": "2. UI elements",
    "text": "2. UI elements\nCells can output interactive UI elements. Interacting with a UI element automatically triggers notebook execution: when you interact with a UI element, its value is sent back to Python, and every cell that references that element is re-run.\nmarimo provides a library of UI elements to choose from under marimo.ui.  üåä Some UI elements. Try interacting with the below elements.\n\n    \n    \n    \n    icon%20%3D%20mo.ui.dropdown(%5B%22%F0%9F%8D%83%22%2C%20%22%F0%9F%8C%8A%22%2C%20%22%E2%9C%A8%22%5D%2C%20value%3D%22%F0%9F%8D%83%22)\n\n\n    \n    \n    \n    repetitions%20%3D%20mo.ui.slider(1%2C%2016%2C%20label%3Df%22number%20of%20%7Bicon.value%7D%3A%20%22)\n\n\n    \n    \n    \n    icon%2C%20repetitions\n\n\n    \n    üçÉ\n    \n    mo.md(%22%23%20%22%20%2B%20icon.value%20*%20repetitions.value)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#marimo-is-just-python",
    "href": "tutorials/intro.html#marimo-is-just-python",
    "title": "Intro",
    "section": "3. marimo is just Python",
    "text": "3. marimo is just Python\nmarimo cells parse Python (and only Python), and marimo notebooks are stored as pure Python files ‚Äî outputs are not included. There‚Äôs no magical syntax.\nThe Python files generated by marimo are:\n\neasily versioned with git, yielding minimal diffs\nlegible for both humans and machines\nformattable using your tool of choice,\nusable as Python scripts, with UI elements taking their default values, and\nimportable by other modules (more on that in the future).  ## 4. Running notebooks as apps\n\nmarimo notebooks can double as apps. Click the app window icon in the bottom-right to see this notebook in ‚Äúapp view.‚Äù\nServe a notebook as an app with marimo run at the command-line. Of course, you can use marimo just to level-up your notebooking, without ever making apps.  ## 5. The marimo command-line tool\nCreating and editing notebooks. Use\nmarimo edit\nin a terminal to start the marimo notebook server. From here you can create a new notebook or edit existing ones.\nRunning as apps. Use\nmarimo run notebook.py\nto start a webserver that serves your notebook as an app in read-only mode, with code cells hidden.\nConvert a Jupyter notebook. Convert a Jupyter notebook to a marimo notebook using marimo convert:\nmarimo convert your_notebook.ipynb &gt; your_app.py\nTutorials. marimo comes packaged with tutorials:\n\ndataflow: more on marimo‚Äôs automatic execution\nui: how to use UI elements\nmarkdown: how to write markdown, with interpolated values and LaTeX\nplots: how plotting works in marimo\nsql: how to use SQL\nlayout: layout elements in marimo\nfileformat: how marimo‚Äôs file format works\nmarkdown-format: for using .md files in marimo\nfor-jupyter-users: if you are coming from Jupyter\n\nStart a tutorial with marimo tutorial; for example,\nmarimo tutorial dataflow\nIn addition to tutorials, we have examples in our our GitHub repo.  ## 6. The marimo editor\nHere are some tips to help you get started with the marimo editor.\n\n            \n            Saving\n\n\nName your app using the box at the top of the screen, or\n  with Ctrl/Cmd+s. You can also create a named app at the\n  command line, e.g., marimo edit app_name.py.\n\n\nSave by clicking the save icon on the bottom right, or by\n  inputting Ctrl/Cmd+s. By default marimo is configured\n  to autosave.\n\n\n\nRun a cell by clicking the play ( ‚ñ∑ ) button on the top\nright of a cell, or by inputting Ctrl/Cmd+Enter.\n\n\nRun a stale cell  by clicking the yellow run button on the\nright of the cell, or by inputting Ctrl/Cmd+Enter. A cell is\nstale when its code has been modified but not run.\n\n\nRun all stale cells by clicking the play ( ‚ñ∑ ) button on\nthe bottom right of the screen, or input Ctrl/Cmd+Shift+r.\n\nConsole output (e.g., print() statements) is shown below a\ncell.\n\nCreate a new cell above or below a given one by clicking\n    the plus button to the left of the cell, which appears on\n    mouse hover.\n\n\nMove a cell up or down by dragging on the handle to the \n    right of the cell, which appears on mouse hover.\n\n\nDelete a cell by clicking the trash bin icon. Bring it\n    back by clicking the undo button on the bottom right of the\n    screen, or with Ctrl/Cmd+Shift+z.\n\nVia the notebook settings (gear icon) or footer panel, you\ncan disable automatic execution. This is helpful when\nworking with expensive notebooks or notebooks that have\nside-effects like database transactions.You can disable a cell via the cell context menu.\nmarimo will never run a disabled cell or any cells that depend on it.\nThis can help prevent accidental execution of expensive computations\nwhen editing a notebook.You can collapse or fold the code in a cell by clicking the arrow\nicons in the line number column to the left, or by using keyboard\nshortcuts.\nUse the command palette (Ctrl/Cmd+k) or a keyboard shortcut to\nquickly fold or unfold all cells.If you have ruff installed,\nyou can format a cell with the keyboard shortcut Ctrl/Cmd+b.Use Ctrl/Cmd+k to open the command palette.Open the notebook menu (top-right) or input Ctrl/Cmd+Shift+h to\nview a list of all keyboard shortcuts.Configure the editor by clicking the gears icon near the top-right\nof the screen.You can leave Marimo & shut down the server by clicking the\ncircled X at the top right of the screen and responding\nto the prompt. \nüíæ Be sure to save your work first! \n            \n            mo.accordion(tips)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#finally-a-fun-fact",
    "href": "tutorials/intro.html#finally-a-fun-fact",
    "title": "Intro",
    "section": "Finally, a fun fact",
    "text": "Finally, a fun fact\n\nThe name ‚Äúmarimo‚Äù is a reference to a type of algae that, under the right conditions, clumps together to form a small sphere called a ‚Äúmarimo moss ball‚Äù. Made of just strands of algae, these beloved assemblages are greater than the sum of their parts.\n\n    \n    \n    \n    tips%20%3D%20%7B%0A%20%20%20%20%22Saving%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**Saving**%0A%0A%20%20%20%20%20%20%20%20-%20_Name_%20your%20app%20using%20the%20box%20at%20the%20top%20of%20the%20screen%2C%20or%0A%20%20%20%20%20%20%20%20%20%20with%20%60Ctrl%2FCmd%2Bs%60.%20You%20can%20also%20create%20a%20named%20app%20at%20the%0A%20%20%20%20%20%20%20%20%20%20command%20line%2C%20e.g.%2C%20%60marimo%20edit%20app_name.py%60.%0A%0A%20%20%20%20%20%20%20%20-%20_Save_%20by%20clicking%20the%20save%20icon%20on%20the%20bottom%20right%2C%20or%20by%0A%20%20%20%20%20%20%20%20%20%20inputting%20%60Ctrl%2FCmd%2Bs%60.%20By%20default%20marimo%20is%20configured%0A%20%20%20%20%20%20%20%20%20%20to%20autosave.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Running%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Run%20a%20cell_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%20the%20top%0A%20%20%20%20%20%20%20%20right%20of%20a%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%0A%0A%20%20%20%20%20%20%20%202.%20_Run%20a%20stale%20cell_%20%20by%20clicking%20the%20yellow%20run%20button%20on%20the%0A%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%20A%20cell%20is%0A%20%20%20%20%20%20%20%20stale%20when%20its%20code%20has%20been%20modified%20but%20not%20run.%0A%0A%20%20%20%20%20%20%20%203.%20_Run%20all%20stale%20cells_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%0A%20%20%20%20%20%20%20%20the%20bottom%20right%20of%20the%20screen%2C%20or%20input%20%60Ctrl%2FCmd%2BShift%2Br%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Console%20Output%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Console%20output%20(e.g.%2C%20%60print()%60%20statements)%20is%20shown%20below%20a%0A%20%20%20%20%20%20%20%20cell.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Creating%2C%20Moving%2C%20and%20Deleting%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Create_%20a%20new%20cell%20above%20or%20below%20a%20given%20one%20by%20clicking%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20plus%20button%20to%20the%20left%20of%20the%20cell%2C%20which%20appears%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%202.%20_Move_%20a%20cell%20up%20or%20down%20by%20dragging%20on%20the%20handle%20to%20the%20%0A%20%20%20%20%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20which%20appears%20on%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%203.%20_Delete_%20a%20cell%20by%20clicking%20the%20trash%20bin%20icon.%20Bring%20it%0A%20%20%20%20%20%20%20%20%20%20%20%20back%20by%20clicking%20the%20undo%20button%20on%20the%20bottom%20right%20of%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20screen%2C%20or%20with%20%60Ctrl%2FCmd%2BShift%2Bz%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Disabling%20Automatic%20Execution%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Via%20the%20notebook%20settings%20(gear%20icon)%20or%20footer%20panel%2C%20you%0A%20%20%20%20%20%20%20%20can%20disable%20automatic%20execution.%20This%20is%20helpful%20when%0A%20%20%20%20%20%20%20%20working%20with%20expensive%20notebooks%20or%20notebooks%20that%20have%0A%20%20%20%20%20%20%20%20side-effects%20like%20database%20transactions.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Disabling%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20disable%20a%20cell%20via%20the%20cell%20context%20menu.%0A%20%20%20%20%20%20%20%20marimo%20will%20never%20run%20a%20disabled%20cell%20or%20any%20cells%20that%20depend%20on%20it.%0A%20%20%20%20%20%20%20%20This%20can%20help%20prevent%20accidental%20execution%20of%20expensive%20computations%0A%20%20%20%20%20%20%20%20when%20editing%20a%20notebook.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Folding%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20collapse%20or%20fold%20the%20code%20in%20a%20cell%20by%20clicking%20the%20arrow%0A%20%20%20%20%20%20%20%20icons%20in%20the%20line%20number%20column%20to%20the%20left%2C%20or%20by%20using%20keyboard%0A%20%20%20%20%20%20%20%20shortcuts.%0A%0A%20%20%20%20%20%20%20%20Use%20the%20command%20palette%20(%60Ctrl%2FCmd%2Bk%60)%20or%20a%20keyboard%20shortcut%20to%0A%20%20%20%20%20%20%20%20quickly%20fold%20or%20unfold%20all%20cells.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Formatting%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20If%20you%20have%20%5Bruff%5D(https%3A%2F%2Fgithub.com%2Fastral-sh%2Fruff)%20installed%2C%0A%20%20%20%20%20%20%20%20you%20can%20format%20a%20cell%20with%20the%20keyboard%20shortcut%20%60Ctrl%2FCmd%2Bb%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Command%20Palette%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20%60Ctrl%2FCmd%2Bk%60%20to%20open%20the%20command%20palette.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Keyboard%20Shortcuts%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Open%20the%20notebook%20menu%20(top-right)%20or%20input%20%60Ctrl%2FCmd%2BShift%2Bh%60%20to%0A%20%20%20%20%20%20%20%20view%20a%20list%20of%20all%20keyboard%20shortcuts.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Configuration%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20Configure%20the%20editor%20by%20clicking%20the%20gears%20icon%20near%20the%20top-right%0A%20%20%20%20%20%20%20of%20the%20screen.%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Exit%20%26%20Shutdown%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20You%20can%20leave%20Marimo%20%26%20shut%20down%20the%20server%20by%20clicking%20the%0A%20%20%20%20%20%20%20circled%20X%20at%20the%20top%20right%20of%20the%20screen%20and%20responding%0A%20%20%20%20%20%20%20to%20the%20prompt.%20%0A%0A%20%20%20%20%20%20%20%3Afloppy_disk%3A%20_Be%20sure%20to%20save%20your%20work%20first!_%20%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%7D",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/plots.html",
    "href": "tutorials/plots.html",
    "title": "Plots",
    "section": "",
    "text": "check_dependencies()\nmarimo supports several popular plotting libraries, including matplotlib, plotly, seaborn, and altair.\nThis tutorial gives examples using matplotlib; other libraries are used similarly.  ## Matplotlib  To show a plot, include it in the last expression of a cell (just like any other output).\n# create the plot in the last line of the cell\nimport matplotlib.pyplot as plt\nplt.plot([1, 2])\nplt.plot([1, 2])\n# create a plot\nplt.plot([1, 2])\n# ... do some work ...\n# make plt.gca() the last line of the cell\nplt.gca()\nplt.plot([1, 2])\n# ... do some work ...\n# make plt.gca() the last line of the cell\nplt.gca()\nmo.accordion(plt_show_explainer)\nA new figure every cell. Every cell starts with an empty figure for the imperative pyplot API.\nx = np.linspace(start=-4, stop=4, num=100, dtype=float)\nplt.plot(x, x)\nplt.plot(x, x**2)\nplt.gca()\nplt.plot(x, x**3)\nTo build a figure over multiple cells, use the object-oriented API and create your own axis:\n_, axis = plt.subplots()\naxis.plot(x, x)\naxis.plot(x, x**2)\naxis\naxis.plot(x, x**3)\naxis\n\n\nDraw plots interactively by parametrizing them with UI elements.\nexponent = mo.ui.slider(1, 5, value=1, step=1, label='exponent')\n\nmo.md(\n    f\"\"\"\n    **Visualizing powers.**\n\n    {exponent}\n    \"\"\"\n)\n@mo.cache\ndef plot_power(exponent):\n    plt.plot(x, x**exponent)\n    return plt.gca()\n_tex = (\n    f\"$$f(x) = x^{exponent.value}$$\" if exponent.value &gt; 1 else \"$$f(x) = x$$\"\n)\n\nmo.md(\n    f\"\"\"\n\n    {_tex}\n\n    {mo.as_html(plot_power(exponent.value))}\n    \"\"\"\n)\n\n\n\n\nmarimo also supports these other plotting libraries:\n\nPlotly\nSeaborn\nAltair\n\nJust output their figure objects as the last expression of a cell, or embed them in markdown with mo.as_html.\nIf you would like another library to be integrated into marimo, please get in touch.\nmodule_not_found_explainer = mo.md(\n    \"\"\"\n    ## Oops!\n\n    It looks like you're missing a package that this tutorial \n    requires.\n\n    Use the package manager panel on the left to install **numpy** and **matplotlib**,\n    then restart the tutorial.\n\n    Or, if you use `uv`, open the tutorial with\n\n    ```\n    uvx marimo tutorial plots\n    ```\n\n    at the command line.\n    \"\"\"\n).callout(kind='warn')\n\ndef check_dependencies():\n    if missing_packages:\n        return module_not_found_explainer\nplt_show_explainer = {\n    \"Using `plt.show()`\": \"\"\"\n    You can use `plt.show()` or `figure.show()` to display\n    plots in the console area of a cell. Keep in mind that console\n    outputs are not shown in the app view.\n    \"\"\"\n}\ntry:\n    import matplotlib\n    import matplotlib.pyplot as plt\n    import numpy as np\n    missing_packages = False\nexcept ModuleNotFoundError:\n    missing_packages = True\n\nif not missing_packages:\n    matplotlib.rcParams['figure.figsize'] = (6, 2.4)\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Plots"
    ]
  },
  {
    "objectID": "tutorials/plots.html#other-libraries",
    "href": "tutorials/plots.html#other-libraries",
    "title": "Plots",
    "section": "",
    "text": "marimo also supports these other plotting libraries:\n\nPlotly\nSeaborn\nAltair\n\nJust output their figure objects as the last expression of a cell, or embed them in markdown with mo.as_html.\nIf you would like another library to be integrated into marimo, please get in touch.\nmodule_not_found_explainer = mo.md(\n    \"\"\"\n    ## Oops!\n\n    It looks like you're missing a package that this tutorial \n    requires.\n\n    Use the package manager panel on the left to install **numpy** and **matplotlib**,\n    then restart the tutorial.\n\n    Or, if you use `uv`, open the tutorial with\n\n    ```\n    uvx marimo tutorial plots\n    ```\n\n    at the command line.\n    \"\"\"\n).callout(kind='warn')\n\ndef check_dependencies():\n    if missing_packages:\n        return module_not_found_explainer\nplt_show_explainer = {\n    \"Using `plt.show()`\": \"\"\"\n    You can use `plt.show()` or `figure.show()` to display\n    plots in the console area of a cell. Keep in mind that console\n    outputs are not shown in the app view.\n    \"\"\"\n}\ntry:\n    import matplotlib\n    import matplotlib.pyplot as plt\n    import numpy as np\n    missing_packages = False\nexcept ModuleNotFoundError:\n    missing_packages = True\n\nif not missing_packages:\n    matplotlib.rcParams['figure.figsize'] = (6, 2.4)\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Plots"
    ]
  },
  {
    "objectID": "tutorials/markdown.html",
    "href": "tutorials/markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "Use marimo‚Äôs ‚Äúmd‚Äù function to write markdown. This function compiles Markdown into HTML that marimo can display.\nFor example, here‚Äôs the code that rendered the above title and paragraph:\nmo.md(\n    '''\n    # Hello, Markdown!\n\n    Use marimo's \"`md`\" function to embed rich text into your marimo\n    apps. This function compiles your Markdown into HTML that marimo\n    can display.\n    '''\n)\n\nTip: toggling between the Markdown and Python editor\nAlthough markdown is written with mo.md, marimo provides a markdown editor that hides this boilerplate from you.\nToggle between the Markdown and Python editors by clicking the blue icon in the top-right of the editor, entering Ctrl/Cmd+Shift+M, or using the ‚Äúcell actions menu‚Äù. You can also hide the markdown editor through the cell actions menu.\nTip: To interpolate Python values into markdown strings, you‚Äôll need to use mo.md(f\"...\") directly; the markdown view does not support f-strings.  ## LaTeX You can embed LaTeX in Markdown.\nFor example,\nmo.md(r'$f : \\mathbf{R} \\to \\mathbf{R}$')\nrenders \\(f : \\mathbf{R} \\to \\mathbf{R}\\), while\nmo.md(\n    r'''\n    \\[\n    f: \\mathbf{R} \\to \\mathbf{R}\n    \\]\n    '''\n)\nrenders the display math\n[ f: . ]\nmo.accordion(\n    {\n        \"Tip: `r''` strings\": mo.md(\n            \"Use `r''` strings to remove the need to escape backslashes\"\n            \" when writing LaTeX.\"\n        )\n    }\n)\nmo.accordion(\n    {\n        \"Note: KaTeX\": mo.md(\n            \"\"\"\n            marimo actually uses KaTeX, a math typesetting library for the\n            web which supports a subset of LaTeX. For a list of\n            (un)supported commands, visit\n            https://katex.org/docs/support_table\n            \"\"\"\n        )\n    }\n)\n\n\nYou can interpolate Python values into markdown using f-strings and marimo‚Äôs as_html function. This lets you create markdown whose contents depend on data that changes at runtime.\nHere are some examples.\ndef _sine_plot():\n    _x = np.linspace(start=0, stop=2 * np.pi)\n    plt.plot(_x, np.sin(_x))\n    return plt.gca()\n\nmo.md(\n    f\"\"\"\n    ### Plots\n    A matplotlib figure:\n\n    ```python3\n    _x = np.linspace(start=0, stop=2*np.pi)\n    sine_plot = plt.plot(_x, np.sin(_x))\n    mo.md(f\"{{mo.as_html(sine_plot)}}\")\n    ```\n    yields\n\n    {mo.as_html(_sine_plot())}\n    \"\"\"\n)\nleaves = mo.ui.slider(1, 32, label=\"üçÉ: \")\n\nmo.md(\n    f\"\"\"\n    ### UI elements\n\n    A `marimo.ui` object:\n\n    ```python3\n    leaves = mo.ui.slider(1, 16, label=\"üçÉ: \")\n    mo.md(f\"{{leaves}}\")\n    ```\n\n    yields\n\n    {leaves}\n    \"\"\"\n)\nmo.md(f\"Your leaves: {'üçÉ' * leaves.value}\")\nmo.accordion(\n    {\n        \"Tip: UI elements can format themselves\": \"\"\"\n        marimo objects know how to format themselves, so you can omit the\n        call to `as_html`.\n        \"\"\"\n    }\n)\nimport polars as pl\n\ndef make_dataframe():\n    x = np.linspace(0, 2 * np.pi, 10)\n    y = np.sin(x)\n    return pl.DataFrame({\"x\": x, \"sin(x)\": y})\n\nmo.md(\n    f\"\"\"\n    ### Other objects\n\n    Use `mo.as_html` to convert objects to HTML. This function\n    generates rich HTML for many Python types, including:\n\n    - lists, dicts, and tuples,\n    - `pandas` dataframes and series,\n    - `seaborn` figures,\n    - `plotly` figures, and\n    - `altair` figures.\n\n    For example, here's a Polars dataframe:\n\n    {mo.as_html(make_dataframe())}\n    \"\"\"\n)\nmo.accordion(\n    {\n        \"Tip: outputs are automatically converted to HTML\": \"\"\"\n        `mo.as_html` is only needed when interpolating objects into\n        markdown; the last expression of a cell (its output) is\n        converted to HTML automatically.\n        \"\"\"\n    }\n)\n\n\n\nHere‚Äôs a more interesting example that puts together everything we‚Äôve learned: rendering markdown with LaTeX that depends on the values of Python objects.\namplitude = mo.ui.slider(1, 2, step=0.1, label=\"amplitude: \")\nperiod = mo.ui.slider(\n    math.pi / 4,\n    4 * math.pi,\n    value=2 * math.pi,\n    step=math.pi / 8,\n    label=\"period: \",\n)\n@mo.cache\ndef plotsin(amplitude, period):\n    x = np.linspace(0, 2 * np.pi, 256)\n    plt.plot(x, amplitude * np.sin(2 * np.pi / period * x))\n    plt.ylim(-2.2, 2.2)\n    return plt.gca()\nmo.md(\n    f\"\"\"\n    **A sin curve.**\n\n    - {amplitude}\n    - {period}\n    \"\"\"\n)\nmo.md(\n    rf\"\"\"\n    You're viewing the graph of\n\n    \\[\n    f(x) = {amplitude.value}\\sin((2\\pi/{period.value:0.2f})x),\n    \\]\n\n    with $x$ ranging from $0$ to $2\\pi$.\n    {mo.as_html(plotsin(amplitude.value, period.value))}\n    \"\"\"\n)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\n\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown.html#interpolating-python-values",
    "href": "tutorials/markdown.html#interpolating-python-values",
    "title": "Markdown",
    "section": "",
    "text": "You can interpolate Python values into markdown using f-strings and marimo‚Äôs as_html function. This lets you create markdown whose contents depend on data that changes at runtime.\nHere are some examples.\ndef _sine_plot():\n    _x = np.linspace(start=0, stop=2 * np.pi)\n    plt.plot(_x, np.sin(_x))\n    return plt.gca()\n\nmo.md(\n    f\"\"\"\n    ### Plots\n    A matplotlib figure:\n\n    ```python3\n    _x = np.linspace(start=0, stop=2*np.pi)\n    sine_plot = plt.plot(_x, np.sin(_x))\n    mo.md(f\"{{mo.as_html(sine_plot)}}\")\n    ```\n    yields\n\n    {mo.as_html(_sine_plot())}\n    \"\"\"\n)\nleaves = mo.ui.slider(1, 32, label=\"üçÉ: \")\n\nmo.md(\n    f\"\"\"\n    ### UI elements\n\n    A `marimo.ui` object:\n\n    ```python3\n    leaves = mo.ui.slider(1, 16, label=\"üçÉ: \")\n    mo.md(f\"{{leaves}}\")\n    ```\n\n    yields\n\n    {leaves}\n    \"\"\"\n)\nmo.md(f\"Your leaves: {'üçÉ' * leaves.value}\")\nmo.accordion(\n    {\n        \"Tip: UI elements can format themselves\": \"\"\"\n        marimo objects know how to format themselves, so you can omit the\n        call to `as_html`.\n        \"\"\"\n    }\n)\nimport polars as pl\n\ndef make_dataframe():\n    x = np.linspace(0, 2 * np.pi, 10)\n    y = np.sin(x)\n    return pl.DataFrame({\"x\": x, \"sin(x)\": y})\n\nmo.md(\n    f\"\"\"\n    ### Other objects\n\n    Use `mo.as_html` to convert objects to HTML. This function\n    generates rich HTML for many Python types, including:\n\n    - lists, dicts, and tuples,\n    - `pandas` dataframes and series,\n    - `seaborn` figures,\n    - `plotly` figures, and\n    - `altair` figures.\n\n    For example, here's a Polars dataframe:\n\n    {mo.as_html(make_dataframe())}\n    \"\"\"\n)\nmo.accordion(\n    {\n        \"Tip: outputs are automatically converted to HTML\": \"\"\"\n        `mo.as_html` is only needed when interpolating objects into\n        markdown; the last expression of a cell (its output) is\n        converted to HTML automatically.\n        \"\"\"\n    }\n)",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown.html#putting-it-all-together",
    "href": "tutorials/markdown.html#putting-it-all-together",
    "title": "Markdown",
    "section": "",
    "text": "Here‚Äôs a more interesting example that puts together everything we‚Äôve learned: rendering markdown with LaTeX that depends on the values of Python objects.\namplitude = mo.ui.slider(1, 2, step=0.1, label=\"amplitude: \")\nperiod = mo.ui.slider(\n    math.pi / 4,\n    4 * math.pi,\n    value=2 * math.pi,\n    step=math.pi / 8,\n    label=\"period: \",\n)\n@mo.cache\ndef plotsin(amplitude, period):\n    x = np.linspace(0, 2 * np.pi, 256)\n    plt.plot(x, amplitude * np.sin(2 * np.pi / period * x))\n    plt.ylim(-2.2, 2.2)\n    return plt.gca()\nmo.md(\n    f\"\"\"\n    **A sin curve.**\n\n    - {amplitude}\n    - {period}\n    \"\"\"\n)\nmo.md(\n    rf\"\"\"\n    You're viewing the graph of\n\n    \\[\n    f(x) = {amplitude.value}\\sin((2\\pi/{period.value:0.2f})x),\n    \\]\n\n    with $x$ ranging from $0$ to $2\\pi$.\n    {mo.as_html(plotsin(amplitude.value, period.value))}\n    \"\"\"\n)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\n\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/ui.html",
    "href": "tutorials/ui.html",
    "title": "Ui",
    "section": "",
    "text": "UI Elements\nOne of marimo‚Äôs most powerful features is its first-class support for interactive user interface (UI) elements: interacting with a UI element will automatically run cells that reference it.  ## marimo.ui\n\n            \n            The marimo.ui module has a library of pre-built elements.\nFor example, here's a slider: \n            \n            slider%20%3D%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D1)%0Aslider%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20%60marimo.ui%60%20module%20has%20a%20library%20of%20pre-built%20elements.%0A%0A%20%20%20%20For%20example%2C%20here's%20a%20%60slider%60%3A%20%7Bslider%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    and here's its value: 1.\n    \n    mo.md(f%22and%20here's%20its%20value%3A%20**%7Bslider.value%7D**.%22)\n\n\nHow interactions run cells\nWhenever you interact with a UI element, its value is sent back to Python. When this happens, all cells that reference the global variable bound to the UI element, but don‚Äôt define it, will run.\nThis simple rule lets you use UI elements to drive the execution of your program, letting you build interactive notebooks and tools for yourselves and others.\n\n            \n            Interacting with a displayed UI element will only \ntrigger reactive execution if the UI element is assigned\nto a global variable.Every UI element has a value attribute that you can access in \nPython.You can embed UI elements in markdown using f-strings.\nFor example, we can render the slider here: \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20UI%20elements%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Interacting%20with%20a%20displayed%20UI%20element%20will%20only%20%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20UI%20element%20is%20assigned%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20accessing%20an%20element's%20value%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Every%20UI%20element%20has%20a%20value%20attribute%20that%20you%20can%20access%20in%20%0A%20%20%20%20%20%20%20%20%20%20%20%20Python.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20embed%20UI%20elements%20in%20markdown%22%3A%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20embed%20UI%20elements%20in%20markdown%20using%20f-strings.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20For%20example%2C%20we%20can%20render%20the%20slider%20here%3A%20%7Bslider%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n        \n\n\nSimple elements\n\nmarimo has a large library of simple UI elements. Here are a just few examples:\n\n    \n    \n    \n    mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20See%20our%20%5Bexamples%20folder%5D(https%3A%2F%2Fgithub.com%2Fmarimo-team%2Fmarimo%2Ftree%2Fmain%2Fexamples%2Fui)%20on%20GitHub%20for%20bite-sized%20notebooks%20showcasing%20all%20our%20UI%20elements.%20For%0A%20%20%20%20a%20more%20detailed%20reference%2C%20see%20our%20%5BAPI%20docs%5D(https%3A%2F%2Fdocs.marimo.io%2Fapi%2Finputs%2F).%0A%20%20%20%20%22%22%22%0A).callout()\n\n\n    \n    \n    \n    number%20%3D%20mo.ui.number(start%3D1%2C%20stop%3D10%2C%20step%3D1)%0Anumber\n\n\n    \n    1\n    \n    number.value\n\n\n    \n    \n    \n    checkbox%20%3D%20mo.ui.checkbox(label%3D%22checkbox%22)%0Acheckbox\n\n\n    \n    False\n    \n    checkbox.value\n\n\n    \n    \n    \n    text%20%3D%20mo.ui.text(placeholder%3D%22type%20some%20text%20...%22)%0Atext\n\n\n    \n    ''\n    \n    text.value\n\n\n    \n    \n    \n    text_area%20%3D%20mo.ui.text_area(placeholder%3D%22type%20some%20text%20...%22)%0Atext_area\n\n\n    \n    ''\n    \n    text_area.value\n\n\n    \n    \n    \n    dropdown%20%3D%20mo.ui.dropdown(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0Adropdown\n\n\n    \n    \n    \n    dropdown.value\n\n\n    \n    \n    \n    run_button%20%3D%20mo.ui.run_button(label%3D%22click%20me%22)%0Arun_button\n\n\n    \n    'Click the run button!'\n    \n    %22Run%20button%20was%20clicked!%22%20if%20run_button.value%20else%20%22Click%20the%20run%20button!%22\n\n\n    \n    \n    \n    file_upload%20%3D%20mo.ui.file(kind%3D%22area%22)%0Afile_upload\n\n\n    \n    \n    \n    file_upload.value\n\n\n    \n    To see more examples, use this dropdown: \n    \n    mo.md(f%22To%20see%20more%20examples%2C%20use%20this%20dropdown%3A%20%7Bbasic_ui_elements%7D%22)\n\n\n    \n    \n    \n    selected_element%20%3D%20construct_element(basic_ui_elements.value)%0Ashow_element(selected_element)\n\n\n    \n    \n    \n    value(selected_element)\n\n\n    \n    \n    \n    documentation(basic_ui_elements.value)\n\n\n\nComposite elements\nComposite elements are advanced elements\nlet you build UI elements out of other UI elements.\n\nUse these powerful elements to logically group together related elements,\ncreate a dynamic set of UI elements, or reduce the number of global\nvariables in your program.\n\nThis first example shows how to create an array of UI elements using mo.ui.array. When you interact with an element in the array, all cells that reference the array are reactively run. If you instead used a regular Python list, cells referring to the list would not be run.\n\n    \n    \n    \n    array%20%3D%20mo.ui.array(%0A%20%20%20%20%5Bmo.ui.text()%2C%20mo.ui.slider(start%3D1%2C%20stop%3D10)%2C%20mo.ui.date()%5D%0A)%0Aarray\n\n\n    \n    \n    \n    array.value\n\nmarimo also comes with mo.ui.dictionary, which is analogous to mo.ui.array\n\n    \n    \n    \n    dictionary%20%3D%20mo.ui.dictionary(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text()%2C%0A%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider(start%3D1%2C%20stop%3D10)%2C%0A%20%20%20%20%20%20%20%20%22date%22%3A%20mo.ui.date()%2C%0A%20%20%20%20%7D%0A)%0Adictionary\n\n\n    \n    \n    \n    dictionary.value\n\n\n    \n    To see additional composite elements, use this dropdown: \n    \n    mo.md(%0A%20%20%20%20f%22To%20see%20additional%20composite%20elements%2C%20use%20this%20dropdown%3A%20%7Bcomposite_elements%7D%22%0A)\n\n\n    \n    \n    \n    composite_element%20%3D%20construct_element(composite_elements.value)%0Ashow_element(composite_element)\n\n\n    \n    \n    \n    value(composite_element)\n\n\n    \n    \n    \n    documentation(composite_elements.value)\n\n\n\nBuilding custom elements\nmarimo supports third-party UI elements through anywidget ‚Äî this lets you build your own interactive UI elements, or use widgets built by others in the community. To learn more, see our docs.  ## Appendix The remaining cells are helper data structures and functions. You can look at their code if you‚Äôre curious how certain parts of this tutorial were implemented.\n\n    \n    \n    \n    composite_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22batch%22%3A%20mo.ui.batch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dictionary%22%3A%20mo.ui.dictionary%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22form%22%3A%20mo.ui.form%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A%20%20%20%20allow_select_none%3DTrue%0A)\n\n\n    \n    \n    \n    basic_ui_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22button%22%3A%20mo.ui.button%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22checkbox%22%3A%20mo.ui.checkbox%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22date%22%3A%20mo.ui.date%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dropdown%22%3A%20mo.ui.dropdown%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22file%22%3A%20mo.ui.file%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22multiselect%22%3A%20mo.ui.multiselect%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22number%22%3A%20mo.ui.number%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22radio%22%3A%20mo.ui.radio%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22range_slider%22%3A%20mo.ui.range_slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22switch%22%3A%20mo.ui.switch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22tabs%22%3A%20mo.ui.tabs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22table%22%3A%20mo.ui.table%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text_area%22%3A%20mo.ui.text_area%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n\n\n    \n    \n    \n    def%20construct_element(value)%3A%0A%20%20%20%20if%20value%20%3D%3D%20mo.ui.array%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text()%2C%20mo.ui.slider(1%2C%2010)%2C%20mo.ui.date()%5D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.batch%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Name%3A%20%7Bname%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Date%3A%20%7Bdate%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20).batch(name%3Dmo.ui.text()%2C%20date%3Dmo.ui.date())%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.button%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.button(%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3D0%2C%20label%3D%22click%20me%22%2C%20on_click%3Dlambda%20value%3A%20value%20%2B%201%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.checkbox%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.checkbox(label%3D%22check%20me%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.date%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.date()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dictionary%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dictionary(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider(1%2C%2010)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text(%22type%20something!%22)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mo.ui.button(value%3D0%2C%20on_click%3Dlambda%20v%3A%20v%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20_%20in%20range(3)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22buttons%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dropdown%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dropdown(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.file%3A%0A%20%20%20%20%20%20%20%20return%20%5Bmo.ui.file(kind%3D%22button%22)%2C%20mo.ui.file(kind%3D%22area%22)%5D%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.form%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area(placeholder%3D%22...%22).form()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.multiselect%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.multiselect(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.number%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.number(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.radio%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.radio(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D%2C%20value%3D%22a%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.range_slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.range_slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.switch%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.switch()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.tabs%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.tabs(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%231%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Michael%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Scott%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%232%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Dwight%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Schrute%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.table%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.table(%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3D%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Michael%22%2C%20%22last_name%22%3A%20%22Scott%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Dwight%22%2C%20%22last_name%22%3A%20%22Schrute%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22Employees%22%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text_area%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area()%0A%20%20%20%20return%20None\n\n\n    \n    \n    \n    def%20show_element(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.hstack(%5Belement%5D%2C%20justify%3D%22center%22)\n\n\n    \n    \n    \n    def%20value(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20v%20%3D%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20element.value%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20not%20isinstance(element%2C%20mo.ui.file)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20element.name()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20element's%20current%20value%20is%20%7Bmo.as_html(element.value)%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)\n\n\n    \n    \n    \n    def%20documentation(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.accordion(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20f%22Documentation%20on%20%60mo.ui.%7Belement.__name__%7D%60%22%3A%20mo.doc(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)\n\n\n    \n    \n    \n    import%20marimo%20as%20mo\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials",
      "Ui"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "marimo + quarto",
    "section": "",
    "text": "This repository provides a framework for integrating Quarto with marimo, enabling markdown documents to be executed in a marimo environment, and reactive in page.\n\n    \n    \n    \n    \n\n\n\nFirst, aquaint yourself with the marimo! One you‚Äôve digested the basics, and maybe even written a few marimo notebooks, start to consider the possibilities of exporting marimo cells to be standalone, Web Assembly modules, embeddable anywhere.\nThat‚Äôs where Quarto comes in with the qmd format.\nqmd is a markdown format that allows for the extraction and execution of code cells in a markdown document. It‚Äôs a great way to maintain readable documents exportable to a variety of formats, while still being able to execute code.\nThis page, and the marimo tutorials in the sidebar are qmd documents, to get a sense of what‚Äôs possible, look at their source.\n\n\n\nWrite a qmd document with {marimo} cells.\nFor instance the following cell\n```python {.marimo}\nprint(\"remember that stdout is not shown\")\nresult = \"Only outputs!\"\nresult,\n```\nproduces the following output:\n\n    \n    \n    \n    print(%22remember%20that%20stdout%20is%20not%20shown%22)%0Aresult%20%3D%20%22Only%20outputs!%22%0Aresult%2C\n\n\nWe can make it editable:\n```python {.marimo}\n#| editor: true\neditor_result = \"Change me\" + (\"!\" * 3)\neditor_result,\n```\n\n    \n    \n    \n    \n\nbut the default is to show the output only.\n\n\n    \n    The value of editor_result in the previous cell: Change me!!!\n    \n    mo.md(%0A%20%20f%22The%20value%20of%20%60editor_result%60%20in%20the%20previous%20cell%3A%20**%7Beditor_result%7D**%22)\n\n\nHold ctrl to manually run a stale cell.\n\n\nInstall quarto and quarto install extension marimo-team/quarto-marimo.\nYou can also export existing notebooks into quarto format: marimo export md mynotebook.py -o mynotebook.qmd",
    "crumbs": [
      "marimo + quarto"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "marimo + quarto",
    "section": "",
    "text": "First, aquaint yourself with the marimo! One you‚Äôve digested the basics, and maybe even written a few marimo notebooks, start to consider the possibilities of exporting marimo cells to be standalone, Web Assembly modules, embeddable anywhere.\nThat‚Äôs where Quarto comes in with the qmd format.\nqmd is a markdown format that allows for the extraction and execution of code cells in a markdown document. It‚Äôs a great way to maintain readable documents exportable to a variety of formats, while still being able to execute code.\nThis page, and the marimo tutorials in the sidebar are qmd documents, to get a sense of what‚Äôs possible, look at their source.",
    "crumbs": [
      "marimo + quarto"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "marimo + quarto",
    "section": "",
    "text": "Write a qmd document with {marimo} cells.\nFor instance the following cell\n```python {.marimo}\nprint(\"remember that stdout is not shown\")\nresult = \"Only outputs!\"\nresult,\n```\nproduces the following output:\n\n    \n    \n    \n    print(%22remember%20that%20stdout%20is%20not%20shown%22)%0Aresult%20%3D%20%22Only%20outputs!%22%0Aresult%2C\n\n\nWe can make it editable:\n```python {.marimo}\n#| editor: true\neditor_result = \"Change me\" + (\"!\" * 3)\neditor_result,\n```\n\n    \n    \n    \n    \n\nbut the default is to show the output only.\n\n\n    \n    The value of editor_result in the previous cell: Change me!!!\n    \n    mo.md(%0A%20%20f%22The%20value%20of%20%60editor_result%60%20in%20the%20previous%20cell%3A%20**%7Beditor_result%7D**%22)\n\n\nHold ctrl to manually run a stale cell.\n\n\nInstall quarto and quarto install extension marimo-team/quarto-marimo.\nYou can also export existing notebooks into quarto format: marimo export md mynotebook.py -o mynotebook.qmd",
    "crumbs": [
      "marimo + quarto"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html",
    "href": "tutorials/markdown_format.html",
    "title": "Markdown",
    "section": "",
    "text": "By default, marimo notebooks are stored as pure Python files. However, you can also store and edit marimo notebooks as .md files, letting you work on prose-heavy marimo notebooks in your editor of choice.\nMake sure to look at the markdown source code of this tutorial!\n\n\nTo edit a markdown notebook, use\n$ marimo edit notebook.md\nTo run it as an app, use\n$ marimo run notebook.md\n\n\n\n\nYou can export marimo notebooks that are stored as Python to the markdown format by running the following command:\n$ marimo export md notebook.py &gt; notebook.md\n\n\n\n\nWhen you do need to create a Python cell in the markdown format, you can use a special code block:\n```python {.marimo}\nimport matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4])\n```\nThis will create the following cell:\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.gca()\nAs long as your code block contains the word marimo in a brace, like {marimo}, or {.marimo note=\"Whatever you want\"}, marimo will treat it as a Python cell.\n\n\n\nYou can break up markdown into multiple cells by using an empty html tag &lt;!----&gt;:  View the source of this notebook to see how this cell was created.  You can still hide cell code in markdown notebooks:\n```python {.marimo hide_code=\"true\"}\nform = (\n    # ...\n    # Just something a bit more complicated\n    # you might not want to see in the editor.\n    # ...\n)\nform\n```\nform = (\n    mo.md('''\n    **Just how great is markdown?.**\n\n    {markdown_is_awesome}\n\n    {marimo_is_amazing}\n''')\n    .batch(\n        markdown_is_awesome=mo.ui.text(label=\"How much do you like markdown?\", placeholder=\"It is pretty swell üåä\"),\n        marimo_is_amazing=mo.ui.slider(label=\"How much do you like marimo?\", start=0, stop=11, value=11),\n    )\n    .form(show_clear_button=True, bordered=False)\n)\nform\nand disable cells too:\n```python {.marimo disabled=\"true\"}\nprint(\"This code cell is disabled, there should be no output!\")\n```\nprint(\"This code cell is disabled, there should be no output!\")\nAdditionally, marimo knows when your code has a syntax issue:\n```python {.marimo}\nprint(\"This code cell has a syntax error\"\n```\nand on notebook save, will annotate the cell for you:\n```python {.marimo unparseable=\"true\"}\nprint(\"This code cell has a syntax error\"\n```\nprint(\"This code cell has a syntax error\"\n\n\n\nmarimo‚Äôs markdown support treats markdown as just plain old markdown. This means that trying to use string interpolation (like this f\"{'üçÉ' * 7}\") will just give you the raw string. This lets you clearly delineate what values are supposed to be computed, and what values are static. To interpolate Python values, just use a Python cell:\nmo.md(f\"\"\"Like so: {\"üçÉ\" * 7}\"\"\")\n\n\nWhenever you try to implement a cell block like this:\n```python {.marimo}\nmo.md(\"This is a markdown cell\")\n```\nThe markdown format will know to automatically keep this as markdown. However, some ambiguous cases can‚Äôt be converted to markdown like this:\nmo.md(\n    \"\"\"\n    This is a markdown cell with an execution block in it\n    ```python {.marimo}\n    # Too ambiguous to convert\n    ```\n    \"\"\"\n)\nIt‚Äôs not likely that you‚Äôll run into this issue, but rest assured that marimo is working behind the scenes to keep your notebooks unambiguous and clean as possible.  ### Saving multicolumn mode\nMulticolumn mode works, but the first cell in a column must be a python cell in order to specify column start and to save correctly:\n```python {.marimo column=\"1\"}\nprint(\"First cell in column 1\")\n```\n\n\n\n\nSince the markdown notebook really is just markdown, you can‚Äôt import from a markdown notebook cells like you can in a python notebook; but you can still give your cells a name:\n```python {.marimo name=\"maybe\"}\n# üéµ Hey, I just met you, and this is crazy\n```\n# But here's my `cell_id`, so call me, `maybe` üé∂\n\n\n\nYou can also run SQL queries in markdown cells through marimo, using a sql code block. For instance:\n```sql {.marimo}\nSELECT GREATEST(x, y), SQRT(z) from uniformly_random_numbers\n```\nThe resultant distribution may be surprising! üé≤1\nSELECT GREATEST(a, b), SQRT(c) from uniformly_random_numbers\nIn this SQL format, Python variable interpolation in SQL queries occurs automatically. Additionally, query results can be assigned to a dataframe with the query attribute. For instance, here‚Äôs how to create a random uniform distribution and assign it to the dataframe uniformly_random_numbers used above:\n```sql {.marimo query=\"uniformly_random_numbers\" hide_output=\"true\"}\nSELECT i.range::text AS id,\n       random() AS x,\n       random() AS y,\n       random() AS z\nFROM\n    -- Note sample_count comes from the slider below!\n    range(1, {sample_count.value + 1}) i;\n```\nYou can learn more about other SQL use in the SQL tutorial (marimo tutorial sql)\nsample_count = mo.ui.slider(1, 1000, value=1000, label=\"Sample Count\")\nsample_count\nSELECT i.range::text AS id,\n       random() AS a,\n       random() AS b,\n       random() AS c\nFROM range(1, {sample_count.value + 1}) i;\n\n\n\n\nThe markdown format is supposed to lower the barrier for writing text heavy documents, it‚Äôs not meant to be a full replacement for the Python notebook format. You can always convert back to a Python notebook if you need to:\n$ marimo convert my_marimo.md &gt; my_marimo.py\n\n\n\n\nBe sure to checkout the markdown.py tutorial (marimo tutorial markdown) for more information on to type-set and render markdown in marimo.\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#running-markdown-notebooks",
    "href": "tutorials/markdown_format.html#running-markdown-notebooks",
    "title": "Markdown",
    "section": "",
    "text": "To edit a markdown notebook, use\n$ marimo edit notebook.md\nTo run it as an app, use\n$ marimo run notebook.md",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#exporting-from-python",
    "href": "tutorials/markdown_format.html#exporting-from-python",
    "title": "Markdown",
    "section": "",
    "text": "You can export marimo notebooks that are stored as Python to the markdown format by running the following command:\n$ marimo export md notebook.py &gt; notebook.md",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#creating-python-cells",
    "href": "tutorials/markdown_format.html#creating-python-cells",
    "title": "Markdown",
    "section": "",
    "text": "When you do need to create a Python cell in the markdown format, you can use a special code block:\n```python {.marimo}\nimport matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4])\n```\nThis will create the following cell:\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.gca()\nAs long as your code block contains the word marimo in a brace, like {marimo}, or {.marimo note=\"Whatever you want\"}, marimo will treat it as a Python cell.",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#mo-tricks-and-tips",
    "href": "tutorials/markdown_format.html#mo-tricks-and-tips",
    "title": "Markdown",
    "section": "",
    "text": "You can break up markdown into multiple cells by using an empty html tag &lt;!----&gt;:  View the source of this notebook to see how this cell was created.  You can still hide cell code in markdown notebooks:\n```python {.marimo hide_code=\"true\"}\nform = (\n    # ...\n    # Just something a bit more complicated\n    # you might not want to see in the editor.\n    # ...\n)\nform\n```\nform = (\n    mo.md('''\n    **Just how great is markdown?.**\n\n    {markdown_is_awesome}\n\n    {marimo_is_amazing}\n''')\n    .batch(\n        markdown_is_awesome=mo.ui.text(label=\"How much do you like markdown?\", placeholder=\"It is pretty swell üåä\"),\n        marimo_is_amazing=mo.ui.slider(label=\"How much do you like marimo?\", start=0, stop=11, value=11),\n    )\n    .form(show_clear_button=True, bordered=False)\n)\nform\nand disable cells too:\n```python {.marimo disabled=\"true\"}\nprint(\"This code cell is disabled, there should be no output!\")\n```\nprint(\"This code cell is disabled, there should be no output!\")\nAdditionally, marimo knows when your code has a syntax issue:\n```python {.marimo}\nprint(\"This code cell has a syntax error\"\n```\nand on notebook save, will annotate the cell for you:\n```python {.marimo unparseable=\"true\"}\nprint(\"This code cell has a syntax error\"\n```\nprint(\"This code cell has a syntax error\"",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#limitations-of-the-markdown-format",
    "href": "tutorials/markdown_format.html#limitations-of-the-markdown-format",
    "title": "Markdown",
    "section": "",
    "text": "marimo‚Äôs markdown support treats markdown as just plain old markdown. This means that trying to use string interpolation (like this f\"{'üçÉ' * 7}\") will just give you the raw string. This lets you clearly delineate what values are supposed to be computed, and what values are static. To interpolate Python values, just use a Python cell:\nmo.md(f\"\"\"Like so: {\"üçÉ\" * 7}\"\"\")\n\n\nWhenever you try to implement a cell block like this:\n```python {.marimo}\nmo.md(\"This is a markdown cell\")\n```\nThe markdown format will know to automatically keep this as markdown. However, some ambiguous cases can‚Äôt be converted to markdown like this:\nmo.md(\n    \"\"\"\n    This is a markdown cell with an execution block in it\n    ```python {.marimo}\n    # Too ambiguous to convert\n    ```\n    \"\"\"\n)\nIt‚Äôs not likely that you‚Äôll run into this issue, but rest assured that marimo is working behind the scenes to keep your notebooks unambiguous and clean as possible.  ### Saving multicolumn mode\nMulticolumn mode works, but the first cell in a column must be a python cell in order to specify column start and to save correctly:\n```python {.marimo column=\"1\"}\nprint(\"First cell in column 1\")\n```\n\n\n\n\nSince the markdown notebook really is just markdown, you can‚Äôt import from a markdown notebook cells like you can in a python notebook; but you can still give your cells a name:\n```python {.marimo name=\"maybe\"}\n# üéµ Hey, I just met you, and this is crazy\n```\n# But here's my `cell_id`, so call me, `maybe` üé∂\n\n\n\nYou can also run SQL queries in markdown cells through marimo, using a sql code block. For instance:\n```sql {.marimo}\nSELECT GREATEST(x, y), SQRT(z) from uniformly_random_numbers\n```\nThe resultant distribution may be surprising! üé≤1\nSELECT GREATEST(a, b), SQRT(c) from uniformly_random_numbers\nIn this SQL format, Python variable interpolation in SQL queries occurs automatically. Additionally, query results can be assigned to a dataframe with the query attribute. For instance, here‚Äôs how to create a random uniform distribution and assign it to the dataframe uniformly_random_numbers used above:\n```sql {.marimo query=\"uniformly_random_numbers\" hide_output=\"true\"}\nSELECT i.range::text AS id,\n       random() AS x,\n       random() AS y,\n       random() AS z\nFROM\n    -- Note sample_count comes from the slider below!\n    range(1, {sample_count.value + 1}) i;\n```\nYou can learn more about other SQL use in the SQL tutorial (marimo tutorial sql)\nsample_count = mo.ui.slider(1, 1000, value=1000, label=\"Sample Count\")\nsample_count\nSELECT i.range::text AS id,\n       random() AS a,\n       random() AS b,\n       random() AS c\nFROM range(1, {sample_count.value + 1}) i;",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#converting-back-to-the-python-file-format",
    "href": "tutorials/markdown_format.html#converting-back-to-the-python-file-format",
    "title": "Markdown",
    "section": "",
    "text": "The markdown format is supposed to lower the barrier for writing text heavy documents, it‚Äôs not meant to be a full replacement for the Python notebook format. You can always convert back to a Python notebook if you need to:\n$ marimo convert my_marimo.md &gt; my_marimo.py",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#more-on-markdown",
    "href": "tutorials/markdown_format.html#more-on-markdown",
    "title": "Markdown",
    "section": "",
    "text": "Be sure to checkout the markdown.py tutorial (marimo tutorial markdown) for more information on to type-set and render markdown in marimo.\nimport marimo as mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#footnotes",
    "href": "tutorials/markdown_format.html#footnotes",
    "title": "Markdown",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe general distributions should be the same‚Ü©Ô∏é",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/fileformat.html",
    "href": "tutorials/fileformat.html",
    "title": "Fileformat",
    "section": "",
    "text": "import%20dataclasses%0Aimport%20random",
    "crumbs": [
      "Tutorials",
      "Fileformat"
    ]
  },
  {
    "objectID": "tutorials/fileformat.html#importing-functions-and-classes-from-notebooks",
    "href": "tutorials/fileformat.html#importing-functions-and-classes-from-notebooks",
    "title": "Fileformat",
    "section": "Importing functions and classes from notebooks",
    "text": "Importing functions and classes from notebooks\nThe details of marimo‚Äôs file format are important if you want to import functions and classes defined in your notebook into other Python modules. If you don‚Äôt intend to do so, you can skip this section.  ### Declaring imports used by functions and classes\nmarimo can serialize functions and classes into the top-level of a file, so you can import them with regular Python syntax:\nfrom my_notebook import my_function\nIn particular, if a cell defines just a single function or class, and if that function or class is pure save for references to variables defined in a special setup cell, it will be serialized top-level.\nSetup cell. Notebooks can optionally include a setup cell that imports modules, written in the file as:\n\nwith app.setup:\n    import marimo as mo\n    import dataclasses\nModules imported in a setup cell can be used in ‚Äútop-level‚Äù functions or classes. You can add the setup cell from the general menu of the editor under: ::lucide:diamond-plus:: Add setup cell.  ### Functions and classes\nNotebook files expose functions and classes that depend only on variables defined in the setup cell (or on other such functions or classes). For example, the following cell:\n\n    \n    \n    \n    def%20roll_die()%3A%0A%20%20%20%20%22%22%22%0A%20%20%20%20A%20reusable%20function.%0A%0A%20%20%20%20Notice%20the%20indicator%20in%20the%20bottom%20right%20of%20the%20cell.%0A%20%20%20%20%22%22%22%0A%20%20%20%20return%20random.randint(1%2C%207)\n\n‚Ä¶ is saved in the notebook file as\n@app.function\ndef roll_die():\n    '''\n    A reusable function.\n\n    Notice the indicator in the bottom right of the cell.\n    '''\n    return random.randint(1, 7)\nMaking it importable as\nfrom my_notebook import roll_die\n\nStandalone classes are also exposed:\n\n    \n    \n    \n    %40dataclasses.dataclass%0Aclass%20SimulationExample%3A%0A%20%20%20%20n_rolls%3A%20int%0A%0A%20%20%20%20def%20simulate(self)%20-%3E%20list%5Bint%5D%3A%0A%20%20%20%20%20%20%20%20return%20%5Broll_die()%20for%20_%20in%20range(self.n_rolls)%5D\n\nThis class is saved in the file as\n@app.class_definition\n@dataclasses.dataclass\nclass SimulationExample:\n    n_rolls: int\n\n    def simulate(self) -&gt; list[int]:\n        return [roll_die() for _ in range(self.n_rolls)]\n\n/// attention | Heads up ///\nNot all standalone functions will be exposed in the module. If your function depends on variables that are defined in other cells, then it won‚Äôt be exposed top-level.\nFor example, this function will not be exposed:\n\n    \n    \n    \n    variable%20%3D%20123\n\n\n    \n    \n    \n    def%20not_a_top_level_function()%3A%0A%20%20%20%20%22%22%22%0A%20%20%20%20This%20function%20depends%20on%20a%20variable%20declared%20in%20another%20cell.%0A%0A%20%20%20%20As%20a%20result%20this%20function%20isn't%20exposed%20in%20the%20file%20%E2%80%94%20and%20the%20tooltip%20in%20the%0A%20%20%20%20bottom-right%20corner%20indicates%20this.%0A%20%20%20%20%22%22%22%0A%20%20%20%20return%20variable",
    "crumbs": [
      "Tutorials",
      "Fileformat"
    ]
  },
  {
    "objectID": "tutorials/fileformat.html#faq",
    "href": "tutorials/fileformat.html#faq",
    "title": "Fileformat",
    "section": "FAQ",
    "text": "FAQ\n\nI want to edit notebooks in a different editor, what do I need to know?\nSee the docs on using your own editor.\n\n\nI want to import functions from a marimo notebook, what do I need to know?\nSee the docs on reusable functions and classes.\n\n\nI want to run pytest on marimo notebooks, what do I need to know?\nSee the docs on testing.  ## This notebook‚Äôs source code\nThe source code of this notebook is shown below:\n\n    \n    \n    \n    with%20open(__file__%2C%20%22r%22%2C%20encoding%3D%22utf-8%22)%20as%20f%3A%0A%20%20%20%20contents%20%3D%20f.read()\n\n\n    \n    \n    \n    mo.ui.code_editor(contents)",
    "crumbs": [
      "Tutorials",
      "Fileformat"
    ]
  },
  {
    "objectID": "tutorials/layout.html",
    "href": "tutorials/layout.html",
    "title": "Layout",
    "section": "",
    "text": "marimo provides functions to help you lay out your output, such as in rows and columns, accordions, tabs, and callouts.  ## Rows and columns\nArrange objects into rows and columns with mo.hstack and mo.vstack.\n\n    \n    \n    \n    mo.hstack(%0A%20%20%20%20%5Bmo.ui.text(label%3D%22hello%22)%2C%20mo.ui.slider(1%2C%2010%2C%20label%3D%22slider%22)%5D%2C%0A%20%20%20%20justify%3D%22start%22%2C%0A)\n\n\n    \n    \n    \n    mo.vstack(%5Bmo.ui.text(label%3D%22world%22)%2C%20mo.ui.number(1%2C%2010%2C%20label%3D%22number%22)%5D)\n\n\n            \n            Combine mo.hstack with mo.vstack to make grids:\n\nYou can pass anything to mo.hstack to mo.vstack (including\nplots!).\n            \n            grid%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.hstack(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text(label%3D%22hello%22)%2C%20mo.ui.slider(1%2C%2010%2C%20label%3D%22slider%22)%5D%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20mo.hstack(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text(label%3D%22world%22)%2C%20mo.ui.number(1%2C%2010%2C%20label%3D%22number%22)%5D%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%5D%2C%0A).center()%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20Combine%20%60mo.hstack%60%20with%20%60mo.vstack%60%20to%20make%20grids%3A%0A%0A%20%20%20%20%7Bgrid%7D%0A%0A%20%20%20%20You%20can%20pass%20anything%20to%20%60mo.hstack%60%20to%20%60mo.vstack%60%20(including%0A%20%20%20%20plots!).%0A%20%20%20%20%22%22%22%0A)\n        \nCustomization. The presentation of stacked elements can be customized with some arguments that are best understood by example.\n\n    \n    \n    \n    justify%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22start%22%2C%20%22center%22%2C%20%22end%22%2C%20%22space-between%22%2C%20%22space-around%22%5D%2C%0A%20%20%20%20value%3D%22space-between%22%2C%0A%20%20%20%20label%3D%22justify%22%2C%0A)%0Aalign%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22start%22%2C%20%22center%22%2C%20%22end%22%2C%20%22stretch%22%5D%2C%20value%3D%22center%22%2C%20label%3D%22align%22%0A)%0Agap%20%3D%20mo.ui.number(start%3D0%2C%20step%3D0.25%2C%20stop%3D2%2C%20value%3D0.5%2C%20label%3D%22gap%22)%0Awrap%20%3D%20mo.ui.checkbox(label%3D%22wrap%22)%0A%0Amo.hstack(%5Bjustify%2C%20align%2C%20gap%2C%20wrap%5D%2C%20justify%3D%22center%22)\n\n\n    \n    \n    \n    size%20%3D%20mo.ui.slider(label%3D%22box%20size%22%2C%20start%3D60%2C%20stop%3D500)%0Amo.hstack(%5Bsize%5D%2C%20justify%3D%22center%22)\n\n\n    \n    1234\n    \n    mo.hstack(%0A%20%20%20%20boxes%2C%0A%20%20%20%20align%3Dalign.value%2C%0A%20%20%20%20justify%3Djustify.value%2C%0A%20%20%20%20gap%3Dgap.value%2C%0A%20%20%20%20wrap%3Dwrap.value%2C%0A)\n\n\n    \n    1234\n    \n    mo.vstack(%0A%20%20%20%20boxes%2C%0A%20%20%20%20align%3Dalign.value%2C%0A%20%20%20%20gap%3Dgap.value%2C%0A)\n\n\n    \n    \n    \n    def%20create_box(num%3D1)%3A%0A%20%20%20%20box_size%20%3D%20size.value%20%2B%20num%20*%2010%0A%20%20%20%20return%20mo.Html(%0A%20%20%20%20%20%20%20%20f%22%3Cdiv%20style%3D'min-width%3A%20%7Bbox_size%7Dpx%3B%20min-height%3A%20%7Bbox_size%7Dpx%3B%20background-color%3A%20orange%3B%20text-align%3A%20center%3B%20line-height%3A%20%7Bbox_size%7Dpx'%3E%7Bstr(num)%7D%3C%2Fdiv%3E%22%0A%20%20%20%20)%0A%0A%0Aboxes%20%3D%20%5Bcreate_box(i)%20for%20i%20in%20range(1%2C%205)%5D\n\n\n            \n            def hstack(items: Sequence[object], justify: Literal['start', 'center',\n  'end', 'space-between', 'space-around'] = 'space-between',\n  align: Optional[Literal['start', 'end', 'center', 'stretch']] = None,\n  wrap: bool = False, gap: float = 0.5, widths: Optional[Literal['equal'] |\n  Sequence[float]] = None) -&gt; Html: \n\nStack items horizontally, in a row.\nCombine with vstack to build a grid.\nExamples:\n    Build a row of items:\n    # Build a row of items\nmo.hstack([mo.md(\"...\"), mo.ui.text_area()])\n\nBuild a row of items with equal width:\n    mo.hstack([mo.md(\"...\"), mo.ui.text_area()], widths=\"equal\")\n\nHave one item stretch to fill the available space,\n    while another fits its content:\n    mo.hstack(\n    [mo.plain_text(\"...\"), mo.ui.text_area(full_width=True)],\n    widths=[0, 1],\n)\n\nBuild a grid:\n    # Build a grid.\nmo.hstack(\n    [\n        mo.vstack([mo.md(\"...\"), mo.ui.text_area()]),\n        mo.vstack([mo.ui.checkbox(), mo.ui.text(), mo.ui.date()]),\n    ]\n)\n\nArgs:\n    items (Sequence[object]): A list of items.\n    justify (Literal[\"start\", \"center\", \"end\", \"space-between\", \"space-around\"]):\n        Justify items horizontally: start, center, end, space-between, or space-around.\n        Defaults to \"space-between\".\n    align (Optional[Literal[\"start\", \"end\", \"center\", \"stretch\"]]): Align items\n        vertically: start, end, center, or stretch.\n    wrap (bool): Wrap items or not. Defaults to False.\n    gap (float): Gap between items as a float in rem. 1rem is 16px by default.\n        Defaults to 0.5.\n    widths (Optional[Literal[\"equal\"] | Sequence[float]]): \"equal\" to give items\n        equal width; or a list of relative widths with same length as items,\n        eg, [1, 2] means the second item is twice as wide as the first; or None\n        for a sensible default.\nReturns:\n    Html: An Html object.def vstack(items: Sequence[object], align: Optional[Literal['start',\n  'end', 'center', 'stretch']] = None, justify: Literal['start', 'center',\n  'end', 'space-between', 'space-around'] = 'start', gap: float = 0.5,\n  heights: Optional[Literal['equal'] | Sequence[float]] = None) -&gt; Html: \n\nStack items vertically, in a column.\nCombine with hstack to build a grid of items.\nExamples:\n    Build a column of items:\n    # Build a column of items\nmo.vstack([mo.md(\"...\"), mo.ui.text_area()])\n\nBuild a grid:\n    # Build a grid.\nmo.vstack(\n    [\n        mo.hstack([mo.md(\"...\"), mo.ui.text_area()]),\n        mo.hstack([mo.ui.checkbox(), mo.ui.text(), mo.ui.date()]),\n    ]\n)\n\nArgs:\n    items (Sequence[object]): A list of items.\n    align (Optional[Literal[\"start\", \"end\", \"center\", \"stretch\"]]): Align items\n        horizontally: start, end, center, or stretch.\n    justify (Literal[\"start\", \"center\", \"end\", \"space-between\", \"space-around\"]):\n        Justify items vertically: start, center, end, space-between, or space-around.\n        Defaults to \"start\".\n    gap (float): Gap between items as a float in rem. 1rem is 16px by default.\n        Defaults to 0.5.\n    heights (Optional[Literal[\"equal\"] | Sequence[float]]): \"equal\" to give items\n        equal height; or a list of relative heights with same length as items,\n        eg, [1, 2] means the second item is twice as tall as the first; or None\n        for a sensible default.\nReturns:\n    Html: An Html object.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60mo.hstack%60%22%3A%20mo.doc(mo.hstack)%2C%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60mo.vstack%60%22%3A%20mo.doc(mo.vstack)%2C%0A%20%20%20%20%7D%0A)\n        \nJustifying Html. While you can center or right-justify any object using mo.hstack, Html objects (returned by most marimo functions, and subclassed by most marimo classes) have a shortcut using via their center, right, and left methods.  This markdown is left-justified.\n\n    \n    This markdown is centered.\n    \n    mo.md(%22This%20markdown%20is%20centered.%22).center()\n\n\n    \n    This markdown is right-justified.\n    \n    mo.md(%22This%20markdown%20is%20right-justified.%22).right()\n\n\n            \n            def center(self) -&gt; Html: \n\nCenter an item.\nExample:\n    mo.md(\"# Hello, world\").center()\n\nReturns:\n    An Html object.def right(self) -&gt; Html: \n\nRight-justify.\nExample:\n    mo.md(\"# Hello, world\").right()\n\nReturns:\n    An Html object.def left(self) -&gt; Html: \n\nLeft-justify.\nExample:\n    mo.md(\"# Hello, world\").left()\n\nReturns:\n    An Html object.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60Html.center%60%22%3A%20mo.doc(mo.Html.center)%2C%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60Html.right%60%22%3A%20mo.doc(mo.Html.right)%2C%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60Html.left%60%22%3A%20mo.doc(mo.Html.left)%2C%0A%20%20%20%20%7D%0A)\n        \n\n\nCreate expandable shelves of content using mo.accordion:  An accordion can contain multiple items:\n\n            \n            By default, only one item can be open at a timeUse the keyword argument multiple=True to allow multiple items\nto be open at the same time\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Multiple%20items%22%3A%20%22By%20default%2C%20only%20one%20item%20can%20be%20open%20at%20a%20time%22%2C%0A%20%20%20%20%20%20%20%20%22Allow%20multiple%20items%20to%20be%20open%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Use%20the%20keyword%20argument%20%60multiple%3DTrue%60%20to%20allow%20multiple%20items%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20be%20open%20at%20the%20same%20time%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n        \n\n\n\nUse mo.ui.tabs to display multiple objects in a single tabbed output:\n\n    \n    Edit UserEdit Organization\n    \n    _settings%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20User**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22First%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Last%20Name%22)%2C%0A%20%20%20%20%5D%0A)%0A%0A_organization%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20Organization**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Organization%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.number(label%3D%22Number%20of%20employees%22%2C%20start%3D0%2C%20stop%3D1000)%2C%0A%20%20%20%20%5D%0A)%0A%0Amo.ui.tabs(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22%F0%9F%A7%99%E2%80%8D%E2%99%80%20User%22%3A%20_settings%2C%0A%20%20%20%20%20%20%20%20%22%F0%9F%8F%A2%20Organization%22%3A%20_organization%2C%0A%20%20%20%20%7D%0A)\n\n\n            \n            class tabs(tabs: dict[str, object], value: Optional[str] = None, lazy: bool\n  = False, label: str = '', on_change: Optional[Callable[[str], None]] =\n  None)\n\nDisplay objects in a tabbed view.\nExamples:\n    Show content in tabs:\n    tab1 = mo.vstack([mo.ui.slider(1, 10), mo.ui.text(), mo.ui.date()])\ntab2 = mo.md(\"You can show arbitrary content in a tab.\")\ntabs = mo.ui.tabs({\"Heading 1\": tab1, \"Heading 2\": tab2})\n\nControl which tab is selected:\n    tabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": tab2}, value=\"Heading 2\"\n)\n\nTab content can be lazily loaded:\n    tabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": expensive_component}, lazy=True\n)\n\nAttributes:\n    value (str): The name of the selected tab.\nArgs:\n    tabs (dict[str, object]): A dictionary of tab names to tab content; strings\n        are interpreted as markdown.\n    value (str, optional): The name of the tab to open. Defaults to the first tab.\n    lazy (bool, optional): Whether to lazily load the tab content.\n        This is a convenience that wraps each tab in a mo.lazy\n        component. Defaults to False.\n    label (str, optional): A descriptive name for the tab. Defaults to \"\".\n    on_change (Callable[[dict[str, object]], None], optional): Optional callback\n        to run when this element's value changes.\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.ui.tabs%60%22%3A%20mo.doc(mo.ui.tabs)%7D)\n        \n\n            \n            \nDisplay a nested structure of lists, dictionaries, and tuples with\nmo.tree:\n\n            \n            _t%20%3D%20%5B%0A%20%20%20%20mo.md(%22**Hello!**%22)%2C%0A%20%20%20%20mo.md(r%22%24f(x)%24%22)%2C%0A%20%20%20%20%7B%22c%22%3A%20mo.ui.slider(1%2C%2010)%2C%20%22d%22%3A%20(mo.ui.checkbox()%2C%20mo.ui.switch())%7D%2C%0A%5D%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%20Tree%0A%0A%20%20%20%20Display%20a%20nested%20structure%20of%20lists%2C%20dictionaries%2C%20and%20tuples%20with%0A%20%20%20%20%60mo.tree%60%3A%0A%0A%20%20%20%20%7Bmo.tree(_t)%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            def tree(items: list[Any] | tuple[Any] | dict[Any, Any],\n  label: Optional[str] = None) -&gt; Html: \n\nRender a nested structure of lists, tuples, or dicts as a tree.\nExample:\n    mo.tree(\n    [\"entry\", \"another entry\", {\"key\": [0, 1, 2]}], label=\"A tree.\"\n)\n\nArgs:\n    items: nested structure of lists, tuples, or dicts\n    label: optional text label for the tree\nReturns:\n    Html: Html object\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.tree%60%22%3A%20mo.doc(mo.tree)%7D)\n        \n\n\n\nTurn any markdown or HTML into an emphasized callout with the callout method:\n\n    \n    \n    \n    callout_kind%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22neutral%22%2C%20%22warn%22%2C%20%22success%22%2C%20%22info%22%2C%20%22danger%22%5D%2C%20value%3D%22neutral%22%0A)\n\n\n    \n    \n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20**This%20is%20a%20callout!**%0A%0A%20%20%20%20You%20can%20turn%20any%20HTML%20or%20markdown%20into%20an%20emphasized%20callout.%0A%20%20%20%20You%20can%20choose%20from%20a%20variety%20of%20different%20callout%20kind.%20This%20one%20is%3A%0A%20%20%20%20%7Bcallout_kind%7D%0A%20%20%20%20%22%22%22%0A).callout(kind%3Dcallout_kind.value)\n\n\n            \n            def callout(value: object, kind: Literal['neutral', 'warn', 'success',\n  'info', 'danger'] = 'neutral') -&gt; Html: \n\nBuild a callout output.\nArgs:\n    value: A value to render in the callout\n    kind: The kind of callout (affects styling).\nReturns:\n    Html (marimo.Html): An HTML object.\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.callout%60%22%3A%20mo.doc(mo.callout)%7D)\n        \n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/layout.html#accordion",
    "href": "tutorials/layout.html#accordion",
    "title": "Layout",
    "section": "",
    "text": "Create expandable shelves of content using mo.accordion:  An accordion can contain multiple items:\n\n            \n            By default, only one item can be open at a timeUse the keyword argument multiple=True to allow multiple items\nto be open at the same time\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Multiple%20items%22%3A%20%22By%20default%2C%20only%20one%20item%20can%20be%20open%20at%20a%20time%22%2C%0A%20%20%20%20%20%20%20%20%22Allow%20multiple%20items%20to%20be%20open%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Use%20the%20keyword%20argument%20%60multiple%3DTrue%60%20to%20allow%20multiple%20items%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20be%20open%20at%20the%20same%20time%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/layout.html#tabs",
    "href": "tutorials/layout.html#tabs",
    "title": "Layout",
    "section": "",
    "text": "Use mo.ui.tabs to display multiple objects in a single tabbed output:\n\n    \n    Edit UserEdit Organization\n    \n    _settings%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20User**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22First%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Last%20Name%22)%2C%0A%20%20%20%20%5D%0A)%0A%0A_organization%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20Organization**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Organization%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.number(label%3D%22Number%20of%20employees%22%2C%20start%3D0%2C%20stop%3D1000)%2C%0A%20%20%20%20%5D%0A)%0A%0Amo.ui.tabs(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22%F0%9F%A7%99%E2%80%8D%E2%99%80%20User%22%3A%20_settings%2C%0A%20%20%20%20%20%20%20%20%22%F0%9F%8F%A2%20Organization%22%3A%20_organization%2C%0A%20%20%20%20%7D%0A)\n\n\n            \n            class tabs(tabs: dict[str, object], value: Optional[str] = None, lazy: bool\n  = False, label: str = '', on_change: Optional[Callable[[str], None]] =\n  None)\n\nDisplay objects in a tabbed view.\nExamples:\n    Show content in tabs:\n    tab1 = mo.vstack([mo.ui.slider(1, 10), mo.ui.text(), mo.ui.date()])\ntab2 = mo.md(\"You can show arbitrary content in a tab.\")\ntabs = mo.ui.tabs({\"Heading 1\": tab1, \"Heading 2\": tab2})\n\nControl which tab is selected:\n    tabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": tab2}, value=\"Heading 2\"\n)\n\nTab content can be lazily loaded:\n    tabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": expensive_component}, lazy=True\n)\n\nAttributes:\n    value (str): The name of the selected tab.\nArgs:\n    tabs (dict[str, object]): A dictionary of tab names to tab content; strings\n        are interpreted as markdown.\n    value (str, optional): The name of the tab to open. Defaults to the first tab.\n    lazy (bool, optional): Whether to lazily load the tab content.\n        This is a convenience that wraps each tab in a mo.lazy\n        component. Defaults to False.\n    label (str, optional): A descriptive name for the tab. Defaults to \"\".\n    on_change (Callable[[dict[str, object]], None], optional): Optional callback\n        to run when this element's value changes.\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.ui.tabs%60%22%3A%20mo.doc(mo.ui.tabs)%7D)\n        \n\n            \n            \nDisplay a nested structure of lists, dictionaries, and tuples with\nmo.tree:\n\n            \n            _t%20%3D%20%5B%0A%20%20%20%20mo.md(%22**Hello!**%22)%2C%0A%20%20%20%20mo.md(r%22%24f(x)%24%22)%2C%0A%20%20%20%20%7B%22c%22%3A%20mo.ui.slider(1%2C%2010)%2C%20%22d%22%3A%20(mo.ui.checkbox()%2C%20mo.ui.switch())%7D%2C%0A%5D%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%20Tree%0A%0A%20%20%20%20Display%20a%20nested%20structure%20of%20lists%2C%20dictionaries%2C%20and%20tuples%20with%0A%20%20%20%20%60mo.tree%60%3A%0A%0A%20%20%20%20%7Bmo.tree(_t)%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            def tree(items: list[Any] | tuple[Any] | dict[Any, Any],\n  label: Optional[str] = None) -&gt; Html: \n\nRender a nested structure of lists, tuples, or dicts as a tree.\nExample:\n    mo.tree(\n    [\"entry\", \"another entry\", {\"key\": [0, 1, 2]}], label=\"A tree.\"\n)\n\nArgs:\n    items: nested structure of lists, tuples, or dicts\n    label: optional text label for the tree\nReturns:\n    Html: Html object\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.tree%60%22%3A%20mo.doc(mo.tree)%7D)",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/layout.html#callout",
    "href": "tutorials/layout.html#callout",
    "title": "Layout",
    "section": "",
    "text": "Turn any markdown or HTML into an emphasized callout with the callout method:\n\n    \n    \n    \n    callout_kind%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22neutral%22%2C%20%22warn%22%2C%20%22success%22%2C%20%22info%22%2C%20%22danger%22%5D%2C%20value%3D%22neutral%22%0A)\n\n\n    \n    \n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20**This%20is%20a%20callout!**%0A%0A%20%20%20%20You%20can%20turn%20any%20HTML%20or%20markdown%20into%20an%20emphasized%20callout.%0A%20%20%20%20You%20can%20choose%20from%20a%20variety%20of%20different%20callout%20kind.%20This%20one%20is%3A%0A%20%20%20%20%7Bcallout_kind%7D%0A%20%20%20%20%22%22%22%0A).callout(kind%3Dcallout_kind.value)\n\n\n            \n            def callout(value: object, kind: Literal['neutral', 'warn', 'success',\n  'info', 'danger'] = 'neutral') -&gt; Html: \n\nBuild a callout output.\nArgs:\n    value: A value to render in the callout\n    kind: The kind of callout (affects styling).\nReturns:\n    Html (marimo.Html): An HTML object.\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.callout%60%22%3A%20mo.doc(mo.callout)%7D)\n        \n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "marimo tutorials",
    "section": "",
    "text": "Open a tutorial.\nmarimo is a powerful library for making reactive notebooks and apps. To get the most out of marimo, get started with a few tutorials, starting with the intro:\n    marimo tutorial intro\nRecommended sequence:\n\nintro\ndataflow\nui\nmarkdown\nplots\nlayout\nfileformat\nfor-jupyter-users\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials"
    ]
  },
  {
    "objectID": "tutorials/sql.html",
    "href": "tutorials/sql.html",
    "title": "Sql",
    "section": "",
    "text": "Let‚Äôs dive into the world of SQL where we don‚Äôt just address tables, we also join them!  With marimo, you can mix-and-match both Python and SQL. To create a SQL cell, you first need to install some additional dependencies, including duckdb. Obtain these dependencies with\npip install 'marimo[sql]'\nhas_duckdb_installed = False\ntry:\n    import duckdb\n\n    has_duckdb_installed = True\nexcept ImportError:\n    pass\n\nhas_polars_installed = False\ntry:\n    import polars\n\n    has_polars_installed = True\nexcept ImportError:\n    pass\n\nhas_pandas_installed = False\ntry:\n    import pandas\n\n    has_pandas_installed = True\nexcept ImportError:\n    pass\nif has_duckdb_installed:\n    mo.output.replace(\n        mo.md(\n            \"\"\"\n            /// Tip | \"Installed\"\n\n                If you see this, DuckDB is already installed.\n            ///\n            \"\"\"\n        )\n    )\nelse:\n    mo.output.replace(\n        mo.md(\n            \"\"\"\n            /// Warning | \"Not Installed\"\n                If you see this, DuckDB is not installed.\n            ///\n            \"\"\"\n        )\n    )\n\n\nOnce the required dependencies are installed, you can create SQL cells in one of the following ways:\n\nright click the Add Cell ::lucide:circle-plus:: buttons on the left of a cell;\nclick the Convert to SQL ::lucide:database:: button in the cell menu ::lucide:ellipsis::\nclick the Add SQL Cell at the bottom of the page;\n\n\n\n\nmarimo is still just Python, even when using SQL. Here is an example of how marimo embeds SQL in Python in its file format:\noutput_df = mo.sql(f\"SELECT * FROM my_table LIMIT {max_rows.value}\")\nNotice that we have an output_df variable in the cell. This is a resulting Polars DataFrame (if you have polars installed) or a Pandas DataFrame (if you don‚Äôt). One of them must be installed in order to interact with the SQL result.\nThe SQL statement itself is an formatted string (f-string), so this means they can contain any valid Python code, such as the values of UI elements. This means your SQL statement and results can be reactive! üöÄ  ## Querying dataframes with SQL  /// Tip | ‚ÄúData sources panel‚Äù\nClick the database \"barrel\" icon in the left toolbar to see all dataframes and in-\nmemory tables that your notebook has access to.\n///  Let‚Äôs take a look at a SQL cell. The next cell generates a dataframe called df.\n_SIZE = 1000\n\n\ndef _create_token_data(n_items=100):\n    import random\n    import string\n\n    def generate_random_string(length):\n        letters = string.ascii_lowercase\n        result_str = \"\".join(random.choice(letters) for i in range(length))\n        return result_str\n\n    def generate_random_numbers(mean, std_dev, num_samples):\n        return [int(random.gauss(mean, std_dev)) for _ in range(num_samples)]\n\n    random_numbers = generate_random_numbers(50, 15, n_items)\n    random_strings = sorted(\n        list(set([generate_random_string(3) for _ in range(n_items)]))\n    )\n\n    return {\n        \"token\": random_strings,\n        \"count\": random_numbers[: len(random_strings)],\n    }\n\n\n_data = _create_token_data(_SIZE)\n\n# Try polars\nif has_polars_installed:\n    import polars as pl\n\n    df = pl.DataFrame(_data)\n# Fallback to pandas (maybe trying to install it)\nelse:\n    import pandas as pd\n\n    df = pd.DataFrame(_data)\nNext, we create a SQL query, refercing the Python dataframe df directly.\n-- This SQL cell is special since we can reference existing dataframes in the global scope as a table in the SQL query. For example, we can reference the `df` dataframe in the global scope, which was defined in another cell using Python.\n\nSELECT * FROM df;\n\n-- By default, the output variable starts with an underscore (`_df`), making it private to this cell. To access the query result in another cell, change the name of the output variable.\n\n\n\n\nYou can create SQL statements that depend on Python values, such as UI elements:\ntoken_prefix = mo.ui.dropdown(\n    list(string.ascii_lowercase), label=\"token prefix\", value=\"a\"\n)\ntoken_prefix\n-- Change the dropdown to see the SQL query filter itself!\n--\n-- Here we use a duckdb function called `starts_with`:\nSELECT * FROM df WHERE starts_with(token, '{token_prefix.value}')\n\n-- Notice that we named the output variable `result`\nSince we named the output variable above result, we can use it back in Python.\ncharting_library = mo.ui.radio([\"matplotlib\", \"altair\", \"plotly\"])\n\nmo.md(\n    f\"\"\"\n    Let's chart the result with a library of your choice:\n\n    {charting_library}\n    \"\"\"\n)\n_header = mo.md(\n    f\"\"\"\n    We can re-use the dropdown from above: {token_prefix}\n\n    Now we have a histogram visualizing the token count distribution of tokens starting\n    with {token_prefix.value}, powered by your SQL query and UI element.\n    \"\"\"\n)\n\nrender_chart(\n    charting_library.value, _header\n) if charting_library.value else None\ndef render_chart(charting_library, header):\n    return mo.vstack(\n        [header, render_charting_library(charting_library)]\n    ).center()\n\n\ndef render_charting_library(charting_library):\n    if charting_library == \"matplotlib\":\n        return render_matplotlib()\n    if charting_library == \"altair\":\n        return render_altair()\n    if charting_library == \"plotly\":\n        return render_plotly()\n\n\ndef render_matplotlib():\n    import matplotlib.pyplot as plt\n\n    plt.hist(result[\"count\"], label=token_prefix.value)\n    plt.xlabel(\"token count\")\n    plt.legend()\n    plt.tight_layout()\n    return plt.gcf()\n\n\ndef render_altair():\n    import altair as alt\n\n    chart = (\n        alt.Chart(result)\n        .mark_bar()\n        .encode(x=alt.X(\"count\", bin=True), y=alt.Y(\"count()\"))\n    )\n    return mo.ui.altair_chart(chart, chart_selection=False)\n\n\ndef render_plotly():\n    import plotly.graph_objects as go\n\n    return go.Figure(data=[go.Histogram(x=result[\"count\"])])\n\n\n\n\nWe‚Äôre not limited to querying dataframes. We can also query an HTTP URL, S3 path, or a file path to a local csv or parquet file.\n-- or\nSELECT * FROM 's3://my-bucket/file.parquet';\n-- or\nSELECT * FROM read_csv('path/to/example.csv');\n-- or\nSELECT * FROM read_parquet('path/to/example.parquet');\nWith a bit of boilerplate, you can even read and write to Postgres, and join Postgres tables with dataframes in the same query. For a full list of supported data sources, check out the duckdb extensions and our example notebook on duckdb connections.\nFor this example, we will query an HTTP endpoint of a csv.\n-- Download a CSV and create an in-memory table; this is optional.\nCREATE OR replace TABLE cars as\nFROM 'https://datasets.marimo.app/cars.csv';\n\n-- Query the table\nSELECT * from cars;\ncylinders_dropdown = mo.ui.range_slider.from_series(\n    cars[\"Cylinders\"], debounce=True, show_value=True\n)\norigin_dropdown = mo.ui.dropdown.from_series(cars[\"Origin\"], value=\"Asia\")\nmo.hstack([cylinders_dropdown, origin_dropdown]).left()\nSELECT * FROM cars\nWHERE\n    Cylinders &gt;= {cylinders_dropdown.value[0]}\n    AND\n    Cylinders &lt;= {cylinders_dropdown.value[1]}\n    AND\n    ORIGIN = '{origin_dropdown.value}'\nmo.hstack(\n    [\n        mo.stat(label=\"Total cars\", value=str(len(filtered_cars))),\n        mo.stat(\n            label=\"Average MPG Highway\",\n            value=f\"{filtered_cars['MPG_Highway'].mean() or 0:.1f}\",\n        ),\n        mo.stat(\n            label=\"Average MPG City\",\n            value=f\"{filtered_cars['MPG_City'].mean() or 0:.1f}\",\n        ),\n    ]\n)\nimport marimo as mo\nimport random\nimport string"
  },
  {
    "objectID": "tutorials/sql.html#creating-sql-cells",
    "href": "tutorials/sql.html#creating-sql-cells",
    "title": "Sql",
    "section": "",
    "text": "Once the required dependencies are installed, you can create SQL cells in one of the following ways:\n\nright click the Add Cell ::lucide:circle-plus:: buttons on the left of a cell;\nclick the Convert to SQL ::lucide:database:: button in the cell menu ::lucide:ellipsis::\nclick the Add SQL Cell at the bottom of the page;"
  },
  {
    "objectID": "tutorials/sql.html#python-representation",
    "href": "tutorials/sql.html#python-representation",
    "title": "Sql",
    "section": "",
    "text": "marimo is still just Python, even when using SQL. Here is an example of how marimo embeds SQL in Python in its file format:\noutput_df = mo.sql(f\"SELECT * FROM my_table LIMIT {max_rows.value}\")\nNotice that we have an output_df variable in the cell. This is a resulting Polars DataFrame (if you have polars installed) or a Pandas DataFrame (if you don‚Äôt). One of them must be installed in order to interact with the SQL result.\nThe SQL statement itself is an formatted string (f-string), so this means they can contain any valid Python code, such as the values of UI elements. This means your SQL statement and results can be reactive! üöÄ  ## Querying dataframes with SQL  /// Tip | ‚ÄúData sources panel‚Äù\nClick the database \"barrel\" icon in the left toolbar to see all dataframes and in-\nmemory tables that your notebook has access to.\n///  Let‚Äôs take a look at a SQL cell. The next cell generates a dataframe called df.\n_SIZE = 1000\n\n\ndef _create_token_data(n_items=100):\n    import random\n    import string\n\n    def generate_random_string(length):\n        letters = string.ascii_lowercase\n        result_str = \"\".join(random.choice(letters) for i in range(length))\n        return result_str\n\n    def generate_random_numbers(mean, std_dev, num_samples):\n        return [int(random.gauss(mean, std_dev)) for _ in range(num_samples)]\n\n    random_numbers = generate_random_numbers(50, 15, n_items)\n    random_strings = sorted(\n        list(set([generate_random_string(3) for _ in range(n_items)]))\n    )\n\n    return {\n        \"token\": random_strings,\n        \"count\": random_numbers[: len(random_strings)],\n    }\n\n\n_data = _create_token_data(_SIZE)\n\n# Try polars\nif has_polars_installed:\n    import polars as pl\n\n    df = pl.DataFrame(_data)\n# Fallback to pandas (maybe trying to install it)\nelse:\n    import pandas as pd\n\n    df = pd.DataFrame(_data)\nNext, we create a SQL query, refercing the Python dataframe df directly.\n-- This SQL cell is special since we can reference existing dataframes in the global scope as a table in the SQL query. For example, we can reference the `df` dataframe in the global scope, which was defined in another cell using Python.\n\nSELECT * FROM df;\n\n-- By default, the output variable starts with an underscore (`_df`), making it private to this cell. To access the query result in another cell, change the name of the output variable."
  },
  {
    "objectID": "tutorials/sql.html#from-python-to-sql-and-back",
    "href": "tutorials/sql.html#from-python-to-sql-and-back",
    "title": "Sql",
    "section": "",
    "text": "You can create SQL statements that depend on Python values, such as UI elements:\ntoken_prefix = mo.ui.dropdown(\n    list(string.ascii_lowercase), label=\"token prefix\", value=\"a\"\n)\ntoken_prefix\n-- Change the dropdown to see the SQL query filter itself!\n--\n-- Here we use a duckdb function called `starts_with`:\nSELECT * FROM df WHERE starts_with(token, '{token_prefix.value}')\n\n-- Notice that we named the output variable `result`\nSince we named the output variable above result, we can use it back in Python.\ncharting_library = mo.ui.radio([\"matplotlib\", \"altair\", \"plotly\"])\n\nmo.md(\n    f\"\"\"\n    Let's chart the result with a library of your choice:\n\n    {charting_library}\n    \"\"\"\n)\n_header = mo.md(\n    f\"\"\"\n    We can re-use the dropdown from above: {token_prefix}\n\n    Now we have a histogram visualizing the token count distribution of tokens starting\n    with {token_prefix.value}, powered by your SQL query and UI element.\n    \"\"\"\n)\n\nrender_chart(\n    charting_library.value, _header\n) if charting_library.value else None\ndef render_chart(charting_library, header):\n    return mo.vstack(\n        [header, render_charting_library(charting_library)]\n    ).center()\n\n\ndef render_charting_library(charting_library):\n    if charting_library == \"matplotlib\":\n        return render_matplotlib()\n    if charting_library == \"altair\":\n        return render_altair()\n    if charting_library == \"plotly\":\n        return render_plotly()\n\n\ndef render_matplotlib():\n    import matplotlib.pyplot as plt\n\n    plt.hist(result[\"count\"], label=token_prefix.value)\n    plt.xlabel(\"token count\")\n    plt.legend()\n    plt.tight_layout()\n    return plt.gcf()\n\n\ndef render_altair():\n    import altair as alt\n\n    chart = (\n        alt.Chart(result)\n        .mark_bar()\n        .encode(x=alt.X(\"count\", bin=True), y=alt.Y(\"count()\"))\n    )\n    return mo.ui.altair_chart(chart, chart_selection=False)\n\n\ndef render_plotly():\n    import plotly.graph_objects as go\n\n    return go.Figure(data=[go.Histogram(x=result[\"count\"])])"
  },
  {
    "objectID": "tutorials/sql.html#csvs-parquet-postgres-and-more",
    "href": "tutorials/sql.html#csvs-parquet-postgres-and-more",
    "title": "Sql",
    "section": "",
    "text": "We‚Äôre not limited to querying dataframes. We can also query an HTTP URL, S3 path, or a file path to a local csv or parquet file.\n-- or\nSELECT * FROM 's3://my-bucket/file.parquet';\n-- or\nSELECT * FROM read_csv('path/to/example.csv');\n-- or\nSELECT * FROM read_parquet('path/to/example.parquet');\nWith a bit of boilerplate, you can even read and write to Postgres, and join Postgres tables with dataframes in the same query. For a full list of supported data sources, check out the duckdb extensions and our example notebook on duckdb connections.\nFor this example, we will query an HTTP endpoint of a csv.\n-- Download a CSV and create an in-memory table; this is optional.\nCREATE OR replace TABLE cars as\nFROM 'https://datasets.marimo.app/cars.csv';\n\n-- Query the table\nSELECT * from cars;\ncylinders_dropdown = mo.ui.range_slider.from_series(\n    cars[\"Cylinders\"], debounce=True, show_value=True\n)\norigin_dropdown = mo.ui.dropdown.from_series(cars[\"Origin\"], value=\"Asia\")\nmo.hstack([cylinders_dropdown, origin_dropdown]).left()\nSELECT * FROM cars\nWHERE\n    Cylinders &gt;= {cylinders_dropdown.value[0]}\n    AND\n    Cylinders &lt;= {cylinders_dropdown.value[1]}\n    AND\n    ORIGIN = '{origin_dropdown.value}'\nmo.hstack(\n    [\n        mo.stat(label=\"Total cars\", value=str(len(filtered_cars))),\n        mo.stat(\n            label=\"Average MPG Highway\",\n            value=f\"{filtered_cars['MPG_Highway'].mean() or 0:.1f}\",\n        ),\n        mo.stat(\n            label=\"Average MPG City\",\n            value=f\"{filtered_cars['MPG_City'].mean() or 0:.1f}\",\n        ),\n    ]\n)\nimport marimo as mo\nimport random\nimport string"
  }
]